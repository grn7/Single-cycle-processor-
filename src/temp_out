#! /c/Source/iverilog-install/bin/vvp
:ivl_version "12.0 (devel)" "(s20150603-1539-g2693dd32b)";
:ivl_delay_selection "TYPICAL";
:vpi_time_precision + 0;
:vpi_module "C:\iverilog\lib\ivl\system.vpi";
:vpi_module "C:\iverilog\lib\ivl\vhdl_sys.vpi";
:vpi_module "C:\iverilog\lib\ivl\vhdl_textio.vpi";
:vpi_module "C:\iverilog\lib\ivl\v2005_math.vpi";
:vpi_module "C:\iverilog\lib\ivl\va_math.vpi";
:vpi_module "C:\iverilog\lib\ivl\v2009.vpi";
S_0000025ab69e8e80 .scope package, "$unit" "$unit" 2 1;
 .timescale 0 0;
S_0000025ab69f35d0 .scope module, "tb_single_cycle_cpu_paper" "tb_single_cycle_cpu_paper" 3 18;
 .timescale 0 0;
v0000025ab6a60090_0 .var/2s "add_count", 31 0;
v0000025ab6a5f910_0 .var/2s "and_count", 31 0;
v0000025ab6a5fa50_0 .var/2s "branch_count", 31 0;
v0000025ab6a5fcd0_0 .var "clk", 0 0;
v0000025ab6a5fff0_0 .var/2s "cycle_count", 31 0;
v0000025ab6a601d0_0 .net "debug_out", 63 0, L_0000025ab69e5870;  1 drivers
v0000025ab6a60770_0 .var/2s "load_count", 31 0;
v0000025ab6a60810_0 .var/2s "or_count", 31 0;
v0000025ab6a60270_0 .var/2s "paper_instruction_count", 31 0;
v0000025ab6a60310_0 .var "rst", 0 0;
v0000025ab6a608b0_0 .var/2s "store_count", 31 0;
v0000025ab6a6b410_0 .var/2s "sub_count", 31 0;
v0000025ab6a6a8d0_0 .var/2s "test_number", 31 0;
S_0000025ab69e9af0 .scope begin, "$ivl_for_loop0" "$ivl_for_loop0" 3 337, 3 337 0, S_0000025ab69f35d0;
 .timescale 0 0;
v0000025ab69062e0_0 .var/2s "i", 31 0;
S_0000025ab69f5770 .scope task, "create_paper_test_files" "create_paper_test_files" 3 40, 3 40 0, S_0000025ab69f35d0;
 .timescale 0 0;
v0000025ab6906880_0 .var/2s "data_fd", 31 0;
v0000025ab6907f00_0 .var/2s "prog_fd", 31 0;
TD_tb_single_cycle_cpu_paper.create_paper_test_files ;
    %vpi_func 3 44 "$fopen" 32, "paper_program.mem", "w" {0 0 0};
    %cast2;
    %store/vec4 v0000025ab6907f00_0, 0, 32;
    %load/vec4 v0000025ab6907f00_0;
    %cmpi/ne 0, 0, 32;
    %jmp/0xz  T_0.0, 4;
    %vpi_call/w 3 46 "$display", "Creating test program with ONLY the 7 paper instructions (no jump)..." {0 0 0};
    %vpi_call/w 3 49 "$fdisplay", v0000025ab6907f00_0, "00003083" {0 0 0};
    %vpi_call/w 3 50 "$fdisplay", v0000025ab6907f00_0, "00803103" {0 0 0};
    %vpi_call/w 3 51 "$fdisplay", v0000025ab6907f00_0, "01003183" {0 0 0};
    %vpi_call/w 3 52 "$fdisplay", v0000025ab6907f00_0, "002081b3" {0 0 0};
    %vpi_call/w 3 53 "$fdisplay", v0000025ab6907f00_0, "40208233" {0 0 0};
    %vpi_call/w 3 54 "$fdisplay", v0000025ab6907f00_0, "0020f2b3" {0 0 0};
    %vpi_call/w 3 55 "$fdisplay", v0000025ab6907f00_0, "0020e333" {0 0 0};
    %vpi_call/w 3 56 "$fdisplay", v0000025ab6907f00_0, "02603f83" {0 0 0};
    %vpi_call/w 3 57 "$fdisplay", v0000025ab6907f00_0, "03f03023" {0 0 0};
    %vpi_call/w 3 58 "$fdisplay", v0000025ab6907f00_0, "00208463" {0 0 0};
    %vpi_call/w 3 59 "$fdisplay", v0000025ab6907f00_0, "04003f83" {0 0 0};
    %vpi_call/w 3 60 "$fdisplay", v0000025ab6907f00_0, "00108463" {0 0 0};
    %vpi_call/w 3 61 "$fdisplay", v0000025ab6907f00_0, "05003f83" {0 0 0};
    %vpi_call/w 3 62 "$fdisplay", v0000025ab6907f00_0, "06003f83" {0 0 0};
    %vpi_call/w 3 63 "$fdisplay", v0000025ab6907f00_0, "fe000ae3" {0 0 0};
    %vpi_call/w 3 64 "$fdisplay", v0000025ab6907f00_0, "00000013" {0 0 0};
    %vpi_call/w 3 66 "$fclose", v0000025ab6907f00_0 {0 0 0};
    %vpi_call/w 3 67 "$display", "\342\234\223 Created paper_program.mem with 7 instruction types only (no jump)" {0 0 0};
    %jmp T_0.1;
T_0.0 ;
    %vpi_call/w 3 69 "$error", "Could not create paper_program.mem file!" {0 0 0};
T_0.1 ;
    %vpi_func 3 73 "$fopen" 32, "paper_data.mem", "w" {0 0 0};
    %cast2;
    %store/vec4 v0000025ab6906880_0, 0, 32;
    %load/vec4 v0000025ab6906880_0;
    %cmpi/ne 0, 0, 32;
    %jmp/0xz  T_0.2, 4;
    %vpi_call/w 3 75 "$fdisplay", v0000025ab6906880_0, "0000000000000005" {0 0 0};
    %vpi_call/w 3 76 "$fdisplay", v0000025ab6906880_0, "0000000000000003" {0 0 0};
    %vpi_call/w 3 77 "$fdisplay", v0000025ab6906880_0, "0000000000000002" {0 0 0};
    %vpi_call/w 3 78 "$fdisplay", v0000025ab6906880_0, "000000000000000A" {0 0 0};
    %vpi_call/w 3 79 "$fdisplay", v0000025ab6906880_0, "0000000000000064" {0 0 0};
    %vpi_call/w 3 80 "$fdisplay", v0000025ab6906880_0, "00000000DEADBEEF" {0 0 0};
    %vpi_call/w 3 81 "$fdisplay", v0000025ab6906880_0, "0000000000000000" {0 0 0};
    %vpi_call/w 3 82 "$fdisplay", v0000025ab6906880_0, "0000000000000001" {0 0 0};
    %vpi_call/w 3 83 "$fdisplay", v0000025ab6906880_0, "CAFEBABE12345678" {0 0 0};
    %vpi_call/w 3 84 "$fdisplay", v0000025ab6906880_0, "AAAAAAAAAAAAAAAA" {0 0 0};
    %vpi_call/w 3 85 "$fdisplay", v0000025ab6906880_0, "BBBBBBBBBBBBBBBB" {0 0 0};
    %vpi_call/w 3 86 "$fdisplay", v0000025ab6906880_0, "CCCCCCCCCCCCCCCC" {0 0 0};
    %vpi_call/w 3 87 "$fdisplay", v0000025ab6906880_0, "DDDDDDDDDDDDDDDD" {0 0 0};
    %vpi_call/w 3 88 "$fclose", v0000025ab6906880_0 {0 0 0};
    %vpi_call/w 3 89 "$display", "\342\234\223 Created paper_data.mem with test constants" {0 0 0};
    %jmp T_0.3;
T_0.2 ;
    %vpi_call/w 3 91 "$error", "Could not create paper_data.mem file!" {0 0 0};
T_0.3 ;
    %end;
S_0000025ab69edba0 .scope task, "display_paper_cpu_state" "display_paper_cpu_state" 3 96, 3 96 0, S_0000025ab69f35d0;
 .timescale 0 0;
v0000025ab6907000_0 .var/2s "cycle_num", 31 0;
v0000025ab6906c40_0 .var/str "phase";
TD_tb_single_cycle_cpu_paper.display_paper_cpu_state ;
    %vpi_call/w 3 97 "$display", "=== %s - Cycle %0d ===", v0000025ab6906c40_0, v0000025ab6907000_0 {0 0 0};
    %vpi_call/w 3 98 "$display", "PC: 0x%h | Instruction: 0x%h", v0000025ab6a60e50_0, v0000025ab6a609f0_0 {0 0 0};
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 7, 0, 2;
    %dup/vec4;
    %pushi/vec4 3, 0, 7;
    %cmp/u;
    %jmp/1 T_1.4, 6;
    %dup/vec4;
    %pushi/vec4 35, 0, 7;
    %cmp/u;
    %jmp/1 T_1.5, 6;
    %dup/vec4;
    %pushi/vec4 51, 0, 7;
    %cmp/u;
    %jmp/1 T_1.6, 6;
    %dup/vec4;
    %pushi/vec4 99, 0, 7;
    %cmp/u;
    %jmp/1 T_1.7, 6;
    %vpi_call/w 3 157 "$display", "Instruction: NOT A PAPER INSTRUCTION! (Opcode: 0x%h)", &PV<v0000025ab6a609f0_0, 0, 7> {0 0 0};
    %load/vec4 v0000025ab6a609f0_0;
    %cmpi/ne 19, 0, 32;
    %jmp/0xz  T_1.10, 6;
    %vpi_call/w 3 159 "$error", "Detected instruction not in the paper's 7-instruction set!" {0 0 0};
T_1.10 ;
    %jmp T_1.9;
T_1.4 ;
    %vpi_call/w 3 103 "$display", "Instruction: LD (Load Double) - Paper Instruction #1" {0 0 0};
    %vpi_call/w 3 104 "$display", "  Format: ld rd, offset(rs1)" {0 0 0};
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 12, 20, 6;
    %vpi_call/w 3 105 "$display", "  rd=%0d, rs1=%0d, offset=%0d", &PV<v0000025ab6a609f0_0, 7, 5>, &PV<v0000025ab6a609f0_0, 15, 5>, S<0,vec4,s12> {1 0 0};
    %jmp T_1.9;
T_1.5 ;
    %vpi_call/w 3 111 "$display", "Instruction: SD (Store Double) - Paper Instruction #2" {0 0 0};
    %vpi_call/w 3 112 "$display", "  Format: sd rs2, offset(rs1)" {0 0 0};
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 7, 25, 6;
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 5, 7, 4;
    %concat/vec4; draw_concat_vec4
    %vpi_call/w 3 113 "$display", "  rs2=%0d, rs1=%0d, offset=%0d", &PV<v0000025ab6a609f0_0, 20, 5>, &PV<v0000025ab6a609f0_0, 15, 5>, S<0,vec4,s12> {1 0 0};
    %jmp T_1.9;
T_1.6 ;
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 3, 12, 5;
    %dup/vec4;
    %pushi/vec4 0, 0, 3;
    %cmp/u;
    %jmp/1 T_1.12, 6;
    %dup/vec4;
    %pushi/vec4 7, 0, 3;
    %cmp/u;
    %jmp/1 T_1.13, 6;
    %dup/vec4;
    %pushi/vec4 6, 0, 3;
    %cmp/u;
    %jmp/1 T_1.14, 6;
    %vpi_call/w 3 143 "$display", "Instruction: UNKNOWN R-TYPE (NOT in paper!)" {0 0 0};
    %jmp T_1.16;
T_1.12 ;
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 1, 30, 6;
    %flag_set/vec4 8;
    %jmp/0xz  T_1.17, 8;
    %vpi_call/w 3 122 "$display", "Instruction: SUB (Subtraction) - Paper Instruction #4" {0 0 0};
    %vpi_call/w 3 123 "$display", "  Format: sub rd, rs1, rs2" {0 0 0};
    %jmp T_1.18;
T_1.17 ;
    %vpi_call/w 3 125 "$display", "Instruction: ADD (Addition) - Paper Instruction #3" {0 0 0};
    %vpi_call/w 3 126 "$display", "  Format: add rd, rs1, rs2" {0 0 0};
T_1.18 ;
    %vpi_call/w 3 128 "$display", "  rd=%0d, rs1=%0d, rs2=%0d", &PV<v0000025ab6a609f0_0, 7, 5>, &PV<v0000025ab6a609f0_0, 15, 5>, &PV<v0000025ab6a609f0_0, 20, 5> {0 0 0};
    %jmp T_1.16;
T_1.13 ;
    %vpi_call/w 3 132 "$display", "Instruction: AND (Bitwise AND) - Paper Instruction #5" {0 0 0};
    %vpi_call/w 3 133 "$display", "  Format: and rd, rs1, rs2" {0 0 0};
    %vpi_call/w 3 134 "$display", "  rd=%0d, rs1=%0d, rs2=%0d", &PV<v0000025ab6a609f0_0, 7, 5>, &PV<v0000025ab6a609f0_0, 15, 5>, &PV<v0000025ab6a609f0_0, 20, 5> {0 0 0};
    %jmp T_1.16;
T_1.14 ;
    %vpi_call/w 3 138 "$display", "Instruction: OR (Bitwise OR) - Paper Instruction #6" {0 0 0};
    %vpi_call/w 3 139 "$display", "  Format: or rd, rs1, rs2" {0 0 0};
    %vpi_call/w 3 140 "$display", "  rd=%0d, rs1=%0d, rs2=%0d", &PV<v0000025ab6a609f0_0, 7, 5>, &PV<v0000025ab6a609f0_0, 15, 5>, &PV<v0000025ab6a609f0_0, 20, 5> {0 0 0};
    %jmp T_1.16;
T_1.16 ;
    %pop/vec4 1;
    %jmp T_1.9;
T_1.7 ;
    %vpi_call/w 3 148 "$display", "Instruction: BEQ (Branch if Equal) - Paper Instruction #7" {0 0 0};
    %vpi_call/w 3 149 "$display", "  Format: beq rs1, rs2, offset" {0 0 0};
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 1, 31, 6;
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 1, 7, 4;
    %concat/vec4; draw_concat_vec4
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 6, 25, 6;
    %concat/vec4; draw_concat_vec4
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 4, 8, 5;
    %concat/vec4; draw_concat_vec4
    %concati/vec4 0, 0, 1;
    %vpi_call/w 3 150 "$display", "  rs1=%0d, rs2=%0d, offset=%0d", &PV<v0000025ab6a609f0_0, 15, 5>, &PV<v0000025ab6a609f0_0, 20, 5>, S<0,vec4,s13> {1 0 0};
    %jmp T_1.9;
T_1.9 ;
    %pop/vec4 1;
    %vpi_call/w 3 164 "$display", "Control Signals:" {0 0 0};
    %load/vec4 v0000025ab6a61210_0;
    %cmpi/e 0, 0, 3;
    %flag_mov 8, 4;
    %jmp/0 T_1.19, 8;
    %pushi/vec4 0, 0, 32; draw_string_vec4
    %pushi/vec4 4277316, 0, 24; draw_string_vec4
    %concat/vec4; draw_string_vec4
    %jmp/1 T_1.20, 8;
T_1.19 ; End of true expr.
    %load/vec4 v0000025ab6a61210_0;
    %cmpi/e 1, 0, 3;
    %flag_mov 9, 4;
    %jmp/0 T_1.21, 9;
    %pushi/vec4 0, 0, 32; draw_string_vec4
    %pushi/vec4 5461314, 0, 24; draw_string_vec4
    %concat/vec4; draw_string_vec4
    %jmp/1 T_1.22, 9;
T_1.21 ; End of true expr.
    %load/vec4 v0000025ab6a61210_0;
    %cmpi/e 2, 0, 3;
    %flag_mov 10, 4;
    %jmp/0 T_1.23, 10;
    %pushi/vec4 0, 0, 32; draw_string_vec4
    %pushi/vec4 4279876, 0, 24; draw_string_vec4
    %concat/vec4; draw_string_vec4
    %jmp/1 T_1.24, 10;
T_1.23 ; End of true expr.
    %load/vec4 v0000025ab6a61210_0;
    %cmpi/e 3, 0, 3;
    %flag_mov 11, 4;
    %jmp/0 T_1.25, 11;
    %pushi/vec4 0, 0, 32; draw_string_vec4
    %pushi/vec4 20306, 0, 24; draw_string_vec4
    %concat/vec4; draw_string_vec4
    %jmp/1 T_1.26, 11;
T_1.25 ; End of true expr.
    %pushi/vec4 1431194446, 0, 32; draw_string_vec4
    %pushi/vec4 5199694, 0, 24; draw_string_vec4
    %concat/vec4; draw_string_vec4
    %jmp/0 T_1.26, 11;
 ; End of false expr.
    %blend;
T_1.26;
    %jmp/0 T_1.24, 10;
 ; End of false expr.
    %blend;
T_1.24;
    %jmp/0 T_1.22, 9;
 ; End of false expr.
    %blend;
T_1.22;
    %jmp/0 T_1.20, 8;
 ; End of false expr.
    %blend;
T_1.20;
    %vpi_call/w 3 165 "$display", "  ALU Control: %b (%s)", v0000025ab6a61210_0, S<0,vec4,u56> {1 0 0};
    %vpi_call/w 3 170 "$display", "  RegWrite: %b | MemRead: %b | MemWrite: %b", v0000025ab6a5fe10_0, v0000025ab6a60bd0_0, v0000025ab6a5ff50_0 {0 0 0};
    %vpi_call/w 3 172 "$display", "  ALUSrc: %b | MemToReg: %b | Branch: %b", v0000025ab6a606d0_0, v0000025ab6a60c70_0, v0000025ab6a5fd70_0 {0 0 0};
    %vpi_call/w 3 175 "$display", "Datapath Signals:" {0 0 0};
    %vpi_call/w 3 176 "$display", "  ALU Result: 0x%h | Zero Flag: %b", v0000025ab6a612b0_0, v0000025ab6a5f870_0 {0 0 0};
    %load/vec4 v0000025ab6a60bd0_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_1.27, 8;
    %vpi_call/w 3 177 "$display", "  Memory Read Data: 0x%h", v0000025ab6a61350_0 {0 0 0};
T_1.27 ;
    %load/vec4 v0000025ab6a5ff50_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_1.29, 8;
    %vpi_call/w 3 178 "$display", "  Memory Write Data: 0x%h", v0000025ab6a5feb0_0 {0 0 0};
T_1.29 ;
    %vpi_call/w 3 179 "$display", "  Debug Output (R31): 0x%h", v0000025ab6a601d0_0 {0 0 0};
    %vpi_call/w 3 180 "$display", "\000" {0 0 0};
    %end;
S_0000025ab685a230 .scope module, "dut" "single_cycle_cpu" 3 30, 4 3 0, S_0000025ab69f35d0;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 1 "rst";
    .port_info 2 /OUTPUT 64 "debug_out";
v0000025ab6a61210_0 .net "alu_control", 2 0, v0000025ab6907fa0_0;  1 drivers
v0000025ab6a612b0_0 .net "alu_result", 63 0, v0000025ab6906600_0;  1 drivers
v0000025ab6a606d0_0 .net "alu_src", 0 0, v0000025ab6908040_0;  1 drivers
v0000025ab6a5fd70_0 .net "branch", 0 0, v0000025ab6907820_0;  1 drivers
v0000025ab6a60450_0 .net "clk", 0 0, v0000025ab6a5fcd0_0;  1 drivers
v0000025ab6a615d0_0 .net "debug_out", 63 0, L_0000025ab69e5870;  alias, 1 drivers
v0000025ab6a604f0_0 .net "imm", 63 0, L_0000025ab6a69bb0;  1 drivers
v0000025ab6a609f0_0 .net "instruction", 31 0, L_0000025ab69e55d0;  1 drivers
v0000025ab6a60bd0_0 .net "mem_read", 0 0, v0000025ab6906740_0;  1 drivers
v0000025ab6a60c70_0 .net "mem_to_reg", 0 0, v0000025ab69075a0_0;  1 drivers
v0000025ab6a5ff50_0 .net "mem_write", 0 0, v0000025ab6907140_0;  1 drivers
v0000025ab6a60e50_0 .net "pc", 63 0, v0000025ab6a5c280_0;  1 drivers
v0000025ab6a5f7d0_0 .net "rd_addr", 4 0, L_0000025ab6a6a790;  1 drivers
v0000025ab6a61350_0 .net "read_data_memory", 63 0, v0000025ab69076e0_0;  1 drivers
v0000025ab6a5fe10_0 .net "reg_write", 0 0, v0000025ab69064c0_0;  1 drivers
v0000025ab6a60f90_0 .net "rst", 0 0, v0000025ab6a60310_0;  1 drivers
v0000025ab6a5feb0_0 .net "write_data_memory", 63 0, L_0000025ab69e5c60;  1 drivers
v0000025ab6a5f870_0 .net "zero", 0 0, L_0000025ab6a69ed0;  1 drivers
L_0000025ab6a6b370 .part v0000025ab6a5c280_0, 0, 32;
L_0000025ab6a6afb0 .part L_0000025ab69e55d0, 0, 7;
L_0000025ab6a69e30 .part L_0000025ab69e55d0, 12, 3;
L_0000025ab6a6b0f0 .part L_0000025ab69e55d0, 25, 7;
L_0000025ab6a6b050 .part v0000025ab6906600_0, 0, 32;
S_0000025ab685a3c0 .scope module, "cu" "control_unit" 4 48, 5 3 0, S_0000025ab685a230;
 .timescale 0 0;
    .port_info 0 /INPUT 7 "opcode";
    .port_info 1 /INPUT 3 "funct3";
    .port_info 2 /INPUT 7 "funct7";
    .port_info 3 /OUTPUT 3 "alu_control";
    .port_info 4 /OUTPUT 1 "reg_write";
    .port_info 5 /OUTPUT 1 "mem_read";
    .port_info 6 /OUTPUT 1 "mem_write";
    .port_info 7 /OUTPUT 1 "mem_to_reg";
    .port_info 8 /OUTPUT 1 "alu_src";
    .port_info 9 /OUTPUT 1 "branch";
v0000025ab6907fa0_0 .var "alu_control", 2 0;
v0000025ab6908040_0 .var "alu_src", 0 0;
v0000025ab6907820_0 .var "branch", 0 0;
v0000025ab6906240_0 .net "funct3", 2 0, L_0000025ab6a69e30;  1 drivers
v0000025ab6907280_0 .net "funct7", 6 0, L_0000025ab6a6b0f0;  1 drivers
v0000025ab6906740_0 .var "mem_read", 0 0;
v0000025ab69075a0_0 .var "mem_to_reg", 0 0;
v0000025ab6907140_0 .var "mem_write", 0 0;
v0000025ab69080e0_0 .net "opcode", 6 0, L_0000025ab6a6afb0;  1 drivers
v0000025ab69064c0_0 .var "reg_write", 0 0;
E_0000025ab68e67f0 .event anyedge, v0000025ab69080e0_0, v0000025ab6906240_0, v0000025ab6907280_0;
S_0000025ab68b9340 .scope module, "data_memory" "data_mem" 4 62, 6 1 0, S_0000025ab685a230;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 1 "rst";
    .port_info 2 /INPUT 32 "addr";
    .port_info 3 /INPUT 64 "wr_data";
    .port_info 4 /INPUT 1 "wr_enable";
    .port_info 5 /INPUT 1 "rd_enable";
    .port_info 6 /OUTPUT 64 "rd_data";
P_0000025ab68bc120 .param/l "mem_size" 0 6 2, +C4<00000000000000000000000100000000>;
P_0000025ab68bc158 .param/str "rom_file" 0 6 4, "data.mem";
P_0000025ab68bc190 .param/l "rom_size" 0 6 3, +C4<00000000000000000000000000010000>;
v0000025ab6907a00_0 .net "addr", 31 0, L_0000025ab6a6b050;  1 drivers
v0000025ab6906920_0 .net "clk", 0 0, v0000025ab6a5fcd0_0;  alias, 1 drivers
v0000025ab6907c80 .array "memory", 0 255, 63 0;
v0000025ab69076e0_0 .var "rd_data", 63 0;
v0000025ab6907320_0 .net "rd_enable", 0 0, v0000025ab6906740_0;  alias, 1 drivers
v0000025ab6906380_0 .net "rst", 0 0, v0000025ab6a60310_0;  alias, 1 drivers
v0000025ab6906420_0 .var "word_addr", 31 0;
v0000025ab6907aa0_0 .net "wr_data", 63 0, L_0000025ab69e5c60;  alias, 1 drivers
v0000025ab69066a0_0 .net "wr_enable", 0 0, v0000025ab6907140_0;  alias, 1 drivers
v0000025ab6907c80_0 .array/port v0000025ab6907c80, 0;
v0000025ab6907c80_1 .array/port v0000025ab6907c80, 1;
E_0000025ab68e6bb0/0 .event anyedge, v0000025ab6906740_0, v0000025ab6906420_0, v0000025ab6907c80_0, v0000025ab6907c80_1;
v0000025ab6907c80_2 .array/port v0000025ab6907c80, 2;
v0000025ab6907c80_3 .array/port v0000025ab6907c80, 3;
v0000025ab6907c80_4 .array/port v0000025ab6907c80, 4;
v0000025ab6907c80_5 .array/port v0000025ab6907c80, 5;
E_0000025ab68e6bb0/1 .event anyedge, v0000025ab6907c80_2, v0000025ab6907c80_3, v0000025ab6907c80_4, v0000025ab6907c80_5;
v0000025ab6907c80_6 .array/port v0000025ab6907c80, 6;
v0000025ab6907c80_7 .array/port v0000025ab6907c80, 7;
v0000025ab6907c80_8 .array/port v0000025ab6907c80, 8;
v0000025ab6907c80_9 .array/port v0000025ab6907c80, 9;
E_0000025ab68e6bb0/2 .event anyedge, v0000025ab6907c80_6, v0000025ab6907c80_7, v0000025ab6907c80_8, v0000025ab6907c80_9;
v0000025ab6907c80_10 .array/port v0000025ab6907c80, 10;
v0000025ab6907c80_11 .array/port v0000025ab6907c80, 11;
v0000025ab6907c80_12 .array/port v0000025ab6907c80, 12;
v0000025ab6907c80_13 .array/port v0000025ab6907c80, 13;
E_0000025ab68e6bb0/3 .event anyedge, v0000025ab6907c80_10, v0000025ab6907c80_11, v0000025ab6907c80_12, v0000025ab6907c80_13;
v0000025ab6907c80_14 .array/port v0000025ab6907c80, 14;
v0000025ab6907c80_15 .array/port v0000025ab6907c80, 15;
v0000025ab6907c80_16 .array/port v0000025ab6907c80, 16;
v0000025ab6907c80_17 .array/port v0000025ab6907c80, 17;
E_0000025ab68e6bb0/4 .event anyedge, v0000025ab6907c80_14, v0000025ab6907c80_15, v0000025ab6907c80_16, v0000025ab6907c80_17;
v0000025ab6907c80_18 .array/port v0000025ab6907c80, 18;
v0000025ab6907c80_19 .array/port v0000025ab6907c80, 19;
v0000025ab6907c80_20 .array/port v0000025ab6907c80, 20;
v0000025ab6907c80_21 .array/port v0000025ab6907c80, 21;
E_0000025ab68e6bb0/5 .event anyedge, v0000025ab6907c80_18, v0000025ab6907c80_19, v0000025ab6907c80_20, v0000025ab6907c80_21;
v0000025ab6907c80_22 .array/port v0000025ab6907c80, 22;
v0000025ab6907c80_23 .array/port v0000025ab6907c80, 23;
v0000025ab6907c80_24 .array/port v0000025ab6907c80, 24;
v0000025ab6907c80_25 .array/port v0000025ab6907c80, 25;
E_0000025ab68e6bb0/6 .event anyedge, v0000025ab6907c80_22, v0000025ab6907c80_23, v0000025ab6907c80_24, v0000025ab6907c80_25;
v0000025ab6907c80_26 .array/port v0000025ab6907c80, 26;
v0000025ab6907c80_27 .array/port v0000025ab6907c80, 27;
v0000025ab6907c80_28 .array/port v0000025ab6907c80, 28;
v0000025ab6907c80_29 .array/port v0000025ab6907c80, 29;
E_0000025ab68e6bb0/7 .event anyedge, v0000025ab6907c80_26, v0000025ab6907c80_27, v0000025ab6907c80_28, v0000025ab6907c80_29;
v0000025ab6907c80_30 .array/port v0000025ab6907c80, 30;
v0000025ab6907c80_31 .array/port v0000025ab6907c80, 31;
v0000025ab6907c80_32 .array/port v0000025ab6907c80, 32;
v0000025ab6907c80_33 .array/port v0000025ab6907c80, 33;
E_0000025ab68e6bb0/8 .event anyedge, v0000025ab6907c80_30, v0000025ab6907c80_31, v0000025ab6907c80_32, v0000025ab6907c80_33;
v0000025ab6907c80_34 .array/port v0000025ab6907c80, 34;
v0000025ab6907c80_35 .array/port v0000025ab6907c80, 35;
v0000025ab6907c80_36 .array/port v0000025ab6907c80, 36;
v0000025ab6907c80_37 .array/port v0000025ab6907c80, 37;
E_0000025ab68e6bb0/9 .event anyedge, v0000025ab6907c80_34, v0000025ab6907c80_35, v0000025ab6907c80_36, v0000025ab6907c80_37;
v0000025ab6907c80_38 .array/port v0000025ab6907c80, 38;
v0000025ab6907c80_39 .array/port v0000025ab6907c80, 39;
v0000025ab6907c80_40 .array/port v0000025ab6907c80, 40;
v0000025ab6907c80_41 .array/port v0000025ab6907c80, 41;
E_0000025ab68e6bb0/10 .event anyedge, v0000025ab6907c80_38, v0000025ab6907c80_39, v0000025ab6907c80_40, v0000025ab6907c80_41;
v0000025ab6907c80_42 .array/port v0000025ab6907c80, 42;
v0000025ab6907c80_43 .array/port v0000025ab6907c80, 43;
v0000025ab6907c80_44 .array/port v0000025ab6907c80, 44;
v0000025ab6907c80_45 .array/port v0000025ab6907c80, 45;
E_0000025ab68e6bb0/11 .event anyedge, v0000025ab6907c80_42, v0000025ab6907c80_43, v0000025ab6907c80_44, v0000025ab6907c80_45;
v0000025ab6907c80_46 .array/port v0000025ab6907c80, 46;
v0000025ab6907c80_47 .array/port v0000025ab6907c80, 47;
v0000025ab6907c80_48 .array/port v0000025ab6907c80, 48;
v0000025ab6907c80_49 .array/port v0000025ab6907c80, 49;
E_0000025ab68e6bb0/12 .event anyedge, v0000025ab6907c80_46, v0000025ab6907c80_47, v0000025ab6907c80_48, v0000025ab6907c80_49;
v0000025ab6907c80_50 .array/port v0000025ab6907c80, 50;
v0000025ab6907c80_51 .array/port v0000025ab6907c80, 51;
v0000025ab6907c80_52 .array/port v0000025ab6907c80, 52;
v0000025ab6907c80_53 .array/port v0000025ab6907c80, 53;
E_0000025ab68e6bb0/13 .event anyedge, v0000025ab6907c80_50, v0000025ab6907c80_51, v0000025ab6907c80_52, v0000025ab6907c80_53;
v0000025ab6907c80_54 .array/port v0000025ab6907c80, 54;
v0000025ab6907c80_55 .array/port v0000025ab6907c80, 55;
v0000025ab6907c80_56 .array/port v0000025ab6907c80, 56;
v0000025ab6907c80_57 .array/port v0000025ab6907c80, 57;
E_0000025ab68e6bb0/14 .event anyedge, v0000025ab6907c80_54, v0000025ab6907c80_55, v0000025ab6907c80_56, v0000025ab6907c80_57;
v0000025ab6907c80_58 .array/port v0000025ab6907c80, 58;
v0000025ab6907c80_59 .array/port v0000025ab6907c80, 59;
v0000025ab6907c80_60 .array/port v0000025ab6907c80, 60;
v0000025ab6907c80_61 .array/port v0000025ab6907c80, 61;
E_0000025ab68e6bb0/15 .event anyedge, v0000025ab6907c80_58, v0000025ab6907c80_59, v0000025ab6907c80_60, v0000025ab6907c80_61;
v0000025ab6907c80_62 .array/port v0000025ab6907c80, 62;
v0000025ab6907c80_63 .array/port v0000025ab6907c80, 63;
v0000025ab6907c80_64 .array/port v0000025ab6907c80, 64;
v0000025ab6907c80_65 .array/port v0000025ab6907c80, 65;
E_0000025ab68e6bb0/16 .event anyedge, v0000025ab6907c80_62, v0000025ab6907c80_63, v0000025ab6907c80_64, v0000025ab6907c80_65;
v0000025ab6907c80_66 .array/port v0000025ab6907c80, 66;
v0000025ab6907c80_67 .array/port v0000025ab6907c80, 67;
v0000025ab6907c80_68 .array/port v0000025ab6907c80, 68;
v0000025ab6907c80_69 .array/port v0000025ab6907c80, 69;
E_0000025ab68e6bb0/17 .event anyedge, v0000025ab6907c80_66, v0000025ab6907c80_67, v0000025ab6907c80_68, v0000025ab6907c80_69;
v0000025ab6907c80_70 .array/port v0000025ab6907c80, 70;
v0000025ab6907c80_71 .array/port v0000025ab6907c80, 71;
v0000025ab6907c80_72 .array/port v0000025ab6907c80, 72;
v0000025ab6907c80_73 .array/port v0000025ab6907c80, 73;
E_0000025ab68e6bb0/18 .event anyedge, v0000025ab6907c80_70, v0000025ab6907c80_71, v0000025ab6907c80_72, v0000025ab6907c80_73;
v0000025ab6907c80_74 .array/port v0000025ab6907c80, 74;
v0000025ab6907c80_75 .array/port v0000025ab6907c80, 75;
v0000025ab6907c80_76 .array/port v0000025ab6907c80, 76;
v0000025ab6907c80_77 .array/port v0000025ab6907c80, 77;
E_0000025ab68e6bb0/19 .event anyedge, v0000025ab6907c80_74, v0000025ab6907c80_75, v0000025ab6907c80_76, v0000025ab6907c80_77;
v0000025ab6907c80_78 .array/port v0000025ab6907c80, 78;
v0000025ab6907c80_79 .array/port v0000025ab6907c80, 79;
v0000025ab6907c80_80 .array/port v0000025ab6907c80, 80;
v0000025ab6907c80_81 .array/port v0000025ab6907c80, 81;
E_0000025ab68e6bb0/20 .event anyedge, v0000025ab6907c80_78, v0000025ab6907c80_79, v0000025ab6907c80_80, v0000025ab6907c80_81;
v0000025ab6907c80_82 .array/port v0000025ab6907c80, 82;
v0000025ab6907c80_83 .array/port v0000025ab6907c80, 83;
v0000025ab6907c80_84 .array/port v0000025ab6907c80, 84;
v0000025ab6907c80_85 .array/port v0000025ab6907c80, 85;
E_0000025ab68e6bb0/21 .event anyedge, v0000025ab6907c80_82, v0000025ab6907c80_83, v0000025ab6907c80_84, v0000025ab6907c80_85;
v0000025ab6907c80_86 .array/port v0000025ab6907c80, 86;
v0000025ab6907c80_87 .array/port v0000025ab6907c80, 87;
v0000025ab6907c80_88 .array/port v0000025ab6907c80, 88;
v0000025ab6907c80_89 .array/port v0000025ab6907c80, 89;
E_0000025ab68e6bb0/22 .event anyedge, v0000025ab6907c80_86, v0000025ab6907c80_87, v0000025ab6907c80_88, v0000025ab6907c80_89;
v0000025ab6907c80_90 .array/port v0000025ab6907c80, 90;
v0000025ab6907c80_91 .array/port v0000025ab6907c80, 91;
v0000025ab6907c80_92 .array/port v0000025ab6907c80, 92;
v0000025ab6907c80_93 .array/port v0000025ab6907c80, 93;
E_0000025ab68e6bb0/23 .event anyedge, v0000025ab6907c80_90, v0000025ab6907c80_91, v0000025ab6907c80_92, v0000025ab6907c80_93;
v0000025ab6907c80_94 .array/port v0000025ab6907c80, 94;
v0000025ab6907c80_95 .array/port v0000025ab6907c80, 95;
v0000025ab6907c80_96 .array/port v0000025ab6907c80, 96;
v0000025ab6907c80_97 .array/port v0000025ab6907c80, 97;
E_0000025ab68e6bb0/24 .event anyedge, v0000025ab6907c80_94, v0000025ab6907c80_95, v0000025ab6907c80_96, v0000025ab6907c80_97;
v0000025ab6907c80_98 .array/port v0000025ab6907c80, 98;
v0000025ab6907c80_99 .array/port v0000025ab6907c80, 99;
v0000025ab6907c80_100 .array/port v0000025ab6907c80, 100;
v0000025ab6907c80_101 .array/port v0000025ab6907c80, 101;
E_0000025ab68e6bb0/25 .event anyedge, v0000025ab6907c80_98, v0000025ab6907c80_99, v0000025ab6907c80_100, v0000025ab6907c80_101;
v0000025ab6907c80_102 .array/port v0000025ab6907c80, 102;
v0000025ab6907c80_103 .array/port v0000025ab6907c80, 103;
v0000025ab6907c80_104 .array/port v0000025ab6907c80, 104;
v0000025ab6907c80_105 .array/port v0000025ab6907c80, 105;
E_0000025ab68e6bb0/26 .event anyedge, v0000025ab6907c80_102, v0000025ab6907c80_103, v0000025ab6907c80_104, v0000025ab6907c80_105;
v0000025ab6907c80_106 .array/port v0000025ab6907c80, 106;
v0000025ab6907c80_107 .array/port v0000025ab6907c80, 107;
v0000025ab6907c80_108 .array/port v0000025ab6907c80, 108;
v0000025ab6907c80_109 .array/port v0000025ab6907c80, 109;
E_0000025ab68e6bb0/27 .event anyedge, v0000025ab6907c80_106, v0000025ab6907c80_107, v0000025ab6907c80_108, v0000025ab6907c80_109;
v0000025ab6907c80_110 .array/port v0000025ab6907c80, 110;
v0000025ab6907c80_111 .array/port v0000025ab6907c80, 111;
v0000025ab6907c80_112 .array/port v0000025ab6907c80, 112;
v0000025ab6907c80_113 .array/port v0000025ab6907c80, 113;
E_0000025ab68e6bb0/28 .event anyedge, v0000025ab6907c80_110, v0000025ab6907c80_111, v0000025ab6907c80_112, v0000025ab6907c80_113;
v0000025ab6907c80_114 .array/port v0000025ab6907c80, 114;
v0000025ab6907c80_115 .array/port v0000025ab6907c80, 115;
v0000025ab6907c80_116 .array/port v0000025ab6907c80, 116;
v0000025ab6907c80_117 .array/port v0000025ab6907c80, 117;
E_0000025ab68e6bb0/29 .event anyedge, v0000025ab6907c80_114, v0000025ab6907c80_115, v0000025ab6907c80_116, v0000025ab6907c80_117;
v0000025ab6907c80_118 .array/port v0000025ab6907c80, 118;
v0000025ab6907c80_119 .array/port v0000025ab6907c80, 119;
v0000025ab6907c80_120 .array/port v0000025ab6907c80, 120;
v0000025ab6907c80_121 .array/port v0000025ab6907c80, 121;
E_0000025ab68e6bb0/30 .event anyedge, v0000025ab6907c80_118, v0000025ab6907c80_119, v0000025ab6907c80_120, v0000025ab6907c80_121;
v0000025ab6907c80_122 .array/port v0000025ab6907c80, 122;
v0000025ab6907c80_123 .array/port v0000025ab6907c80, 123;
v0000025ab6907c80_124 .array/port v0000025ab6907c80, 124;
v0000025ab6907c80_125 .array/port v0000025ab6907c80, 125;
E_0000025ab68e6bb0/31 .event anyedge, v0000025ab6907c80_122, v0000025ab6907c80_123, v0000025ab6907c80_124, v0000025ab6907c80_125;
v0000025ab6907c80_126 .array/port v0000025ab6907c80, 126;
v0000025ab6907c80_127 .array/port v0000025ab6907c80, 127;
v0000025ab6907c80_128 .array/port v0000025ab6907c80, 128;
v0000025ab6907c80_129 .array/port v0000025ab6907c80, 129;
E_0000025ab68e6bb0/32 .event anyedge, v0000025ab6907c80_126, v0000025ab6907c80_127, v0000025ab6907c80_128, v0000025ab6907c80_129;
v0000025ab6907c80_130 .array/port v0000025ab6907c80, 130;
v0000025ab6907c80_131 .array/port v0000025ab6907c80, 131;
v0000025ab6907c80_132 .array/port v0000025ab6907c80, 132;
v0000025ab6907c80_133 .array/port v0000025ab6907c80, 133;
E_0000025ab68e6bb0/33 .event anyedge, v0000025ab6907c80_130, v0000025ab6907c80_131, v0000025ab6907c80_132, v0000025ab6907c80_133;
v0000025ab6907c80_134 .array/port v0000025ab6907c80, 134;
v0000025ab6907c80_135 .array/port v0000025ab6907c80, 135;
v0000025ab6907c80_136 .array/port v0000025ab6907c80, 136;
v0000025ab6907c80_137 .array/port v0000025ab6907c80, 137;
E_0000025ab68e6bb0/34 .event anyedge, v0000025ab6907c80_134, v0000025ab6907c80_135, v0000025ab6907c80_136, v0000025ab6907c80_137;
v0000025ab6907c80_138 .array/port v0000025ab6907c80, 138;
v0000025ab6907c80_139 .array/port v0000025ab6907c80, 139;
v0000025ab6907c80_140 .array/port v0000025ab6907c80, 140;
v0000025ab6907c80_141 .array/port v0000025ab6907c80, 141;
E_0000025ab68e6bb0/35 .event anyedge, v0000025ab6907c80_138, v0000025ab6907c80_139, v0000025ab6907c80_140, v0000025ab6907c80_141;
v0000025ab6907c80_142 .array/port v0000025ab6907c80, 142;
v0000025ab6907c80_143 .array/port v0000025ab6907c80, 143;
v0000025ab6907c80_144 .array/port v0000025ab6907c80, 144;
v0000025ab6907c80_145 .array/port v0000025ab6907c80, 145;
E_0000025ab68e6bb0/36 .event anyedge, v0000025ab6907c80_142, v0000025ab6907c80_143, v0000025ab6907c80_144, v0000025ab6907c80_145;
v0000025ab6907c80_146 .array/port v0000025ab6907c80, 146;
v0000025ab6907c80_147 .array/port v0000025ab6907c80, 147;
v0000025ab6907c80_148 .array/port v0000025ab6907c80, 148;
v0000025ab6907c80_149 .array/port v0000025ab6907c80, 149;
E_0000025ab68e6bb0/37 .event anyedge, v0000025ab6907c80_146, v0000025ab6907c80_147, v0000025ab6907c80_148, v0000025ab6907c80_149;
v0000025ab6907c80_150 .array/port v0000025ab6907c80, 150;
v0000025ab6907c80_151 .array/port v0000025ab6907c80, 151;
v0000025ab6907c80_152 .array/port v0000025ab6907c80, 152;
v0000025ab6907c80_153 .array/port v0000025ab6907c80, 153;
E_0000025ab68e6bb0/38 .event anyedge, v0000025ab6907c80_150, v0000025ab6907c80_151, v0000025ab6907c80_152, v0000025ab6907c80_153;
v0000025ab6907c80_154 .array/port v0000025ab6907c80, 154;
v0000025ab6907c80_155 .array/port v0000025ab6907c80, 155;
v0000025ab6907c80_156 .array/port v0000025ab6907c80, 156;
v0000025ab6907c80_157 .array/port v0000025ab6907c80, 157;
E_0000025ab68e6bb0/39 .event anyedge, v0000025ab6907c80_154, v0000025ab6907c80_155, v0000025ab6907c80_156, v0000025ab6907c80_157;
v0000025ab6907c80_158 .array/port v0000025ab6907c80, 158;
v0000025ab6907c80_159 .array/port v0000025ab6907c80, 159;
v0000025ab6907c80_160 .array/port v0000025ab6907c80, 160;
v0000025ab6907c80_161 .array/port v0000025ab6907c80, 161;
E_0000025ab68e6bb0/40 .event anyedge, v0000025ab6907c80_158, v0000025ab6907c80_159, v0000025ab6907c80_160, v0000025ab6907c80_161;
v0000025ab6907c80_162 .array/port v0000025ab6907c80, 162;
v0000025ab6907c80_163 .array/port v0000025ab6907c80, 163;
v0000025ab6907c80_164 .array/port v0000025ab6907c80, 164;
v0000025ab6907c80_165 .array/port v0000025ab6907c80, 165;
E_0000025ab68e6bb0/41 .event anyedge, v0000025ab6907c80_162, v0000025ab6907c80_163, v0000025ab6907c80_164, v0000025ab6907c80_165;
v0000025ab6907c80_166 .array/port v0000025ab6907c80, 166;
v0000025ab6907c80_167 .array/port v0000025ab6907c80, 167;
v0000025ab6907c80_168 .array/port v0000025ab6907c80, 168;
v0000025ab6907c80_169 .array/port v0000025ab6907c80, 169;
E_0000025ab68e6bb0/42 .event anyedge, v0000025ab6907c80_166, v0000025ab6907c80_167, v0000025ab6907c80_168, v0000025ab6907c80_169;
v0000025ab6907c80_170 .array/port v0000025ab6907c80, 170;
v0000025ab6907c80_171 .array/port v0000025ab6907c80, 171;
v0000025ab6907c80_172 .array/port v0000025ab6907c80, 172;
v0000025ab6907c80_173 .array/port v0000025ab6907c80, 173;
E_0000025ab68e6bb0/43 .event anyedge, v0000025ab6907c80_170, v0000025ab6907c80_171, v0000025ab6907c80_172, v0000025ab6907c80_173;
v0000025ab6907c80_174 .array/port v0000025ab6907c80, 174;
v0000025ab6907c80_175 .array/port v0000025ab6907c80, 175;
v0000025ab6907c80_176 .array/port v0000025ab6907c80, 176;
v0000025ab6907c80_177 .array/port v0000025ab6907c80, 177;
E_0000025ab68e6bb0/44 .event anyedge, v0000025ab6907c80_174, v0000025ab6907c80_175, v0000025ab6907c80_176, v0000025ab6907c80_177;
v0000025ab6907c80_178 .array/port v0000025ab6907c80, 178;
v0000025ab6907c80_179 .array/port v0000025ab6907c80, 179;
v0000025ab6907c80_180 .array/port v0000025ab6907c80, 180;
v0000025ab6907c80_181 .array/port v0000025ab6907c80, 181;
E_0000025ab68e6bb0/45 .event anyedge, v0000025ab6907c80_178, v0000025ab6907c80_179, v0000025ab6907c80_180, v0000025ab6907c80_181;
v0000025ab6907c80_182 .array/port v0000025ab6907c80, 182;
v0000025ab6907c80_183 .array/port v0000025ab6907c80, 183;
v0000025ab6907c80_184 .array/port v0000025ab6907c80, 184;
v0000025ab6907c80_185 .array/port v0000025ab6907c80, 185;
E_0000025ab68e6bb0/46 .event anyedge, v0000025ab6907c80_182, v0000025ab6907c80_183, v0000025ab6907c80_184, v0000025ab6907c80_185;
v0000025ab6907c80_186 .array/port v0000025ab6907c80, 186;
v0000025ab6907c80_187 .array/port v0000025ab6907c80, 187;
v0000025ab6907c80_188 .array/port v0000025ab6907c80, 188;
v0000025ab6907c80_189 .array/port v0000025ab6907c80, 189;
E_0000025ab68e6bb0/47 .event anyedge, v0000025ab6907c80_186, v0000025ab6907c80_187, v0000025ab6907c80_188, v0000025ab6907c80_189;
v0000025ab6907c80_190 .array/port v0000025ab6907c80, 190;
v0000025ab6907c80_191 .array/port v0000025ab6907c80, 191;
v0000025ab6907c80_192 .array/port v0000025ab6907c80, 192;
v0000025ab6907c80_193 .array/port v0000025ab6907c80, 193;
E_0000025ab68e6bb0/48 .event anyedge, v0000025ab6907c80_190, v0000025ab6907c80_191, v0000025ab6907c80_192, v0000025ab6907c80_193;
v0000025ab6907c80_194 .array/port v0000025ab6907c80, 194;
v0000025ab6907c80_195 .array/port v0000025ab6907c80, 195;
v0000025ab6907c80_196 .array/port v0000025ab6907c80, 196;
v0000025ab6907c80_197 .array/port v0000025ab6907c80, 197;
E_0000025ab68e6bb0/49 .event anyedge, v0000025ab6907c80_194, v0000025ab6907c80_195, v0000025ab6907c80_196, v0000025ab6907c80_197;
v0000025ab6907c80_198 .array/port v0000025ab6907c80, 198;
v0000025ab6907c80_199 .array/port v0000025ab6907c80, 199;
v0000025ab6907c80_200 .array/port v0000025ab6907c80, 200;
v0000025ab6907c80_201 .array/port v0000025ab6907c80, 201;
E_0000025ab68e6bb0/50 .event anyedge, v0000025ab6907c80_198, v0000025ab6907c80_199, v0000025ab6907c80_200, v0000025ab6907c80_201;
v0000025ab6907c80_202 .array/port v0000025ab6907c80, 202;
v0000025ab6907c80_203 .array/port v0000025ab6907c80, 203;
v0000025ab6907c80_204 .array/port v0000025ab6907c80, 204;
v0000025ab6907c80_205 .array/port v0000025ab6907c80, 205;
E_0000025ab68e6bb0/51 .event anyedge, v0000025ab6907c80_202, v0000025ab6907c80_203, v0000025ab6907c80_204, v0000025ab6907c80_205;
v0000025ab6907c80_206 .array/port v0000025ab6907c80, 206;
v0000025ab6907c80_207 .array/port v0000025ab6907c80, 207;
v0000025ab6907c80_208 .array/port v0000025ab6907c80, 208;
v0000025ab6907c80_209 .array/port v0000025ab6907c80, 209;
E_0000025ab68e6bb0/52 .event anyedge, v0000025ab6907c80_206, v0000025ab6907c80_207, v0000025ab6907c80_208, v0000025ab6907c80_209;
v0000025ab6907c80_210 .array/port v0000025ab6907c80, 210;
v0000025ab6907c80_211 .array/port v0000025ab6907c80, 211;
v0000025ab6907c80_212 .array/port v0000025ab6907c80, 212;
v0000025ab6907c80_213 .array/port v0000025ab6907c80, 213;
E_0000025ab68e6bb0/53 .event anyedge, v0000025ab6907c80_210, v0000025ab6907c80_211, v0000025ab6907c80_212, v0000025ab6907c80_213;
v0000025ab6907c80_214 .array/port v0000025ab6907c80, 214;
v0000025ab6907c80_215 .array/port v0000025ab6907c80, 215;
v0000025ab6907c80_216 .array/port v0000025ab6907c80, 216;
v0000025ab6907c80_217 .array/port v0000025ab6907c80, 217;
E_0000025ab68e6bb0/54 .event anyedge, v0000025ab6907c80_214, v0000025ab6907c80_215, v0000025ab6907c80_216, v0000025ab6907c80_217;
v0000025ab6907c80_218 .array/port v0000025ab6907c80, 218;
v0000025ab6907c80_219 .array/port v0000025ab6907c80, 219;
v0000025ab6907c80_220 .array/port v0000025ab6907c80, 220;
v0000025ab6907c80_221 .array/port v0000025ab6907c80, 221;
E_0000025ab68e6bb0/55 .event anyedge, v0000025ab6907c80_218, v0000025ab6907c80_219, v0000025ab6907c80_220, v0000025ab6907c80_221;
v0000025ab6907c80_222 .array/port v0000025ab6907c80, 222;
v0000025ab6907c80_223 .array/port v0000025ab6907c80, 223;
v0000025ab6907c80_224 .array/port v0000025ab6907c80, 224;
v0000025ab6907c80_225 .array/port v0000025ab6907c80, 225;
E_0000025ab68e6bb0/56 .event anyedge, v0000025ab6907c80_222, v0000025ab6907c80_223, v0000025ab6907c80_224, v0000025ab6907c80_225;
v0000025ab6907c80_226 .array/port v0000025ab6907c80, 226;
v0000025ab6907c80_227 .array/port v0000025ab6907c80, 227;
v0000025ab6907c80_228 .array/port v0000025ab6907c80, 228;
v0000025ab6907c80_229 .array/port v0000025ab6907c80, 229;
E_0000025ab68e6bb0/57 .event anyedge, v0000025ab6907c80_226, v0000025ab6907c80_227, v0000025ab6907c80_228, v0000025ab6907c80_229;
v0000025ab6907c80_230 .array/port v0000025ab6907c80, 230;
v0000025ab6907c80_231 .array/port v0000025ab6907c80, 231;
v0000025ab6907c80_232 .array/port v0000025ab6907c80, 232;
v0000025ab6907c80_233 .array/port v0000025ab6907c80, 233;
E_0000025ab68e6bb0/58 .event anyedge, v0000025ab6907c80_230, v0000025ab6907c80_231, v0000025ab6907c80_232, v0000025ab6907c80_233;
v0000025ab6907c80_234 .array/port v0000025ab6907c80, 234;
v0000025ab6907c80_235 .array/port v0000025ab6907c80, 235;
v0000025ab6907c80_236 .array/port v0000025ab6907c80, 236;
v0000025ab6907c80_237 .array/port v0000025ab6907c80, 237;
E_0000025ab68e6bb0/59 .event anyedge, v0000025ab6907c80_234, v0000025ab6907c80_235, v0000025ab6907c80_236, v0000025ab6907c80_237;
v0000025ab6907c80_238 .array/port v0000025ab6907c80, 238;
v0000025ab6907c80_239 .array/port v0000025ab6907c80, 239;
v0000025ab6907c80_240 .array/port v0000025ab6907c80, 240;
v0000025ab6907c80_241 .array/port v0000025ab6907c80, 241;
E_0000025ab68e6bb0/60 .event anyedge, v0000025ab6907c80_238, v0000025ab6907c80_239, v0000025ab6907c80_240, v0000025ab6907c80_241;
v0000025ab6907c80_242 .array/port v0000025ab6907c80, 242;
v0000025ab6907c80_243 .array/port v0000025ab6907c80, 243;
v0000025ab6907c80_244 .array/port v0000025ab6907c80, 244;
v0000025ab6907c80_245 .array/port v0000025ab6907c80, 245;
E_0000025ab68e6bb0/61 .event anyedge, v0000025ab6907c80_242, v0000025ab6907c80_243, v0000025ab6907c80_244, v0000025ab6907c80_245;
v0000025ab6907c80_246 .array/port v0000025ab6907c80, 246;
v0000025ab6907c80_247 .array/port v0000025ab6907c80, 247;
v0000025ab6907c80_248 .array/port v0000025ab6907c80, 248;
v0000025ab6907c80_249 .array/port v0000025ab6907c80, 249;
E_0000025ab68e6bb0/62 .event anyedge, v0000025ab6907c80_246, v0000025ab6907c80_247, v0000025ab6907c80_248, v0000025ab6907c80_249;
v0000025ab6907c80_250 .array/port v0000025ab6907c80, 250;
v0000025ab6907c80_251 .array/port v0000025ab6907c80, 251;
v0000025ab6907c80_252 .array/port v0000025ab6907c80, 252;
v0000025ab6907c80_253 .array/port v0000025ab6907c80, 253;
E_0000025ab68e6bb0/63 .event anyedge, v0000025ab6907c80_250, v0000025ab6907c80_251, v0000025ab6907c80_252, v0000025ab6907c80_253;
v0000025ab6907c80_254 .array/port v0000025ab6907c80, 254;
v0000025ab6907c80_255 .array/port v0000025ab6907c80, 255;
E_0000025ab68e6bb0/64 .event anyedge, v0000025ab6907c80_254, v0000025ab6907c80_255;
E_0000025ab68e6bb0 .event/or E_0000025ab68e6bb0/0, E_0000025ab68e6bb0/1, E_0000025ab68e6bb0/2, E_0000025ab68e6bb0/3, E_0000025ab68e6bb0/4, E_0000025ab68e6bb0/5, E_0000025ab68e6bb0/6, E_0000025ab68e6bb0/7, E_0000025ab68e6bb0/8, E_0000025ab68e6bb0/9, E_0000025ab68e6bb0/10, E_0000025ab68e6bb0/11, E_0000025ab68e6bb0/12, E_0000025ab68e6bb0/13, E_0000025ab68e6bb0/14, E_0000025ab68e6bb0/15, E_0000025ab68e6bb0/16, E_0000025ab68e6bb0/17, E_0000025ab68e6bb0/18, E_0000025ab68e6bb0/19, E_0000025ab68e6bb0/20, E_0000025ab68e6bb0/21, E_0000025ab68e6bb0/22, E_0000025ab68e6bb0/23, E_0000025ab68e6bb0/24, E_0000025ab68e6bb0/25, E_0000025ab68e6bb0/26, E_0000025ab68e6bb0/27, E_0000025ab68e6bb0/28, E_0000025ab68e6bb0/29, E_0000025ab68e6bb0/30, E_0000025ab68e6bb0/31, E_0000025ab68e6bb0/32, E_0000025ab68e6bb0/33, E_0000025ab68e6bb0/34, E_0000025ab68e6bb0/35, E_0000025ab68e6bb0/36, E_0000025ab68e6bb0/37, E_0000025ab68e6bb0/38, E_0000025ab68e6bb0/39, E_0000025ab68e6bb0/40, E_0000025ab68e6bb0/41, E_0000025ab68e6bb0/42, E_0000025ab68e6bb0/43, E_0000025ab68e6bb0/44, E_0000025ab68e6bb0/45, E_0000025ab68e6bb0/46, E_0000025ab68e6bb0/47, E_0000025ab68e6bb0/48, E_0000025ab68e6bb0/49, E_0000025ab68e6bb0/50, E_0000025ab68e6bb0/51, E_0000025ab68e6bb0/52, E_0000025ab68e6bb0/53, E_0000025ab68e6bb0/54, E_0000025ab68e6bb0/55, E_0000025ab68e6bb0/56, E_0000025ab68e6bb0/57, E_0000025ab68e6bb0/58, E_0000025ab68e6bb0/59, E_0000025ab68e6bb0/60, E_0000025ab68e6bb0/61, E_0000025ab68e6bb0/62, E_0000025ab68e6bb0/63, E_0000025ab68e6bb0/64;
E_0000025ab68e6c70 .event posedge, v0000025ab6906380_0, v0000025ab6906920_0;
S_0000025ab68b94d0 .scope begin, "$ivl_for_loop1" "$ivl_for_loop1" 6 21, 6 21 0, S_0000025ab68b9340;
 .timescale 0 0;
v0000025ab6906b00_0 .var/2s "i", 31 0;
S_0000025ab68b5780 .scope begin, "$ivl_for_loop2" "$ivl_for_loop2" 6 30, 6 30 0, S_0000025ab68b9340;
 .timescale 0 0;
v0000025ab69067e0_0 .var/2s "i", 31 0;
S_0000025ab68b5910 .scope module, "datapath_inst" "datapath" 4 73, 7 1 0, S_0000025ab685a230;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 1 "rst";
    .port_info 2 /INPUT 32 "instruction";
    .port_info 3 /INPUT 64 "read_data_memory";
    .port_info 4 /INPUT 3 "alu_control";
    .port_info 5 /INPUT 1 "reg_write";
    .port_info 6 /INPUT 1 "alu_src";
    .port_info 7 /INPUT 1 "mem_to_reg";
    .port_info 8 /OUTPUT 64 "alu_result";
    .port_info 9 /OUTPUT 64 "write_data_memory";
    .port_info 10 /OUTPUT 5 "rd_addr";
    .port_info 11 /OUTPUT 1 "zero";
    .port_info 12 /OUTPUT 64 "debug_out";
L_0000025ab69e5c60 .functor BUFZ 64, L_0000025ab69e5aa0, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0000000000000000000000000000000000000000000000000000000000000000>;
v0000025ab6a5ab60_0 .net *"_ivl_3", 0 0, L_0000025ab6a6a0b0;  1 drivers
v0000025ab6a5b100_0 .net *"_ivl_4", 51 0, L_0000025ab6a697f0;  1 drivers
v0000025ab6a5c5a0_0 .net *"_ivl_7", 11 0, L_0000025ab6a69890;  1 drivers
v0000025ab6a5b920_0 .net "alu_b", 63 0, L_0000025ab6a69c50;  1 drivers
v0000025ab6a5bba0_0 .net "alu_control", 2 0, v0000025ab6907fa0_0;  alias, 1 drivers
v0000025ab6a5af20_0 .net "alu_result", 63 0, v0000025ab6906600_0;  alias, 1 drivers
v0000025ab6a5aca0_0 .net "alu_src", 0 0, v0000025ab6908040_0;  alias, 1 drivers
v0000025ab6a5b4c0_0 .net "clk", 0 0, v0000025ab6a5fcd0_0;  alias, 1 drivers
v0000025ab6a5a7a0_0 .net "debug_out", 63 0, L_0000025ab69e5870;  alias, 1 drivers
v0000025ab6a5bf60_0 .net "imm", 63 0, L_0000025ab6a69930;  1 drivers
v0000025ab6a5afc0_0 .net "instruction", 31 0, L_0000025ab69e55d0;  alias, 1 drivers
v0000025ab6a5c140_0 .net "mem_to_reg", 0 0, v0000025ab69075a0_0;  alias, 1 drivers
v0000025ab6a5b240_0 .net "rd_addr", 4 0, L_0000025ab6a6a790;  alias, 1 drivers
v0000025ab6a5be20_0 .net "read_data_memory", 63 0, v0000025ab69076e0_0;  alias, 1 drivers
v0000025ab6a5a8e0_0 .net "reg_write", 0 0, v0000025ab69064c0_0;  alias, 1 drivers
v0000025ab6a5bce0_0 .var "rs1", 4 0;
v0000025ab6a5ae80_0 .net "rs1_data", 63 0, L_0000025ab69e5a30;  1 drivers
v0000025ab6a5b380_0 .var "rs2", 4 0;
v0000025ab6a5b420_0 .net "rs2_data", 63 0, L_0000025ab69e5aa0;  1 drivers
v0000025ab6a5ac00_0 .net "rst", 0 0, v0000025ab6a60310_0;  alias, 1 drivers
v0000025ab6a5b560_0 .net "wb_data", 63 0, L_0000025ab6a6a010;  1 drivers
v0000025ab6a5b600_0 .net "write_data_memory", 63 0, L_0000025ab69e5c60;  alias, 1 drivers
v0000025ab6a5c3c0_0 .net "zero", 0 0, L_0000025ab6a69ed0;  alias, 1 drivers
L_0000025ab6a6a790 .part L_0000025ab69e55d0, 7, 5;
L_0000025ab6a6a0b0 .part L_0000025ab69e55d0, 31, 1;
LS_0000025ab6a697f0_0_0 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_4 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_8 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_12 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_16 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_20 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_24 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_28 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_32 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_36 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_40 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_44 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_0_48 .concat [ 1 1 1 1], L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0, L_0000025ab6a6a0b0;
LS_0000025ab6a697f0_1_0 .concat [ 4 4 4 4], LS_0000025ab6a697f0_0_0, LS_0000025ab6a697f0_0_4, LS_0000025ab6a697f0_0_8, LS_0000025ab6a697f0_0_12;
LS_0000025ab6a697f0_1_4 .concat [ 4 4 4 4], LS_0000025ab6a697f0_0_16, LS_0000025ab6a697f0_0_20, LS_0000025ab6a697f0_0_24, LS_0000025ab6a697f0_0_28;
LS_0000025ab6a697f0_1_8 .concat [ 4 4 4 4], LS_0000025ab6a697f0_0_32, LS_0000025ab6a697f0_0_36, LS_0000025ab6a697f0_0_40, LS_0000025ab6a697f0_0_44;
LS_0000025ab6a697f0_1_12 .concat [ 4 0 0 0], LS_0000025ab6a697f0_0_48;
L_0000025ab6a697f0 .concat [ 16 16 16 4], LS_0000025ab6a697f0_1_0, LS_0000025ab6a697f0_1_4, LS_0000025ab6a697f0_1_8, LS_0000025ab6a697f0_1_12;
L_0000025ab6a69890 .part L_0000025ab69e55d0, 20, 12;
L_0000025ab6a69930 .concat [ 12 52 0 0], L_0000025ab6a69890, L_0000025ab6a697f0;
L_0000025ab6a69c50 .functor MUXZ 64, L_0000025ab69e5aa0, L_0000025ab6a69930, v0000025ab6908040_0, C4<>;
L_0000025ab6a6a010 .functor MUXZ 64, v0000025ab6906600_0, v0000025ab69076e0_0, v0000025ab69075a0_0, C4<>;
S_0000025ab68af260 .scope module, "alu_inst" "alu" 7 57, 8 3 0, S_0000025ab68b5910;
 .timescale 0 0;
    .port_info 0 /INPUT 64 "a";
    .port_info 1 /INPUT 64 "b";
    .port_info 2 /INPUT 3 "alu_control";
    .port_info 3 /OUTPUT 64 "result";
    .port_info 4 /OUTPUT 1 "zero";
L_0000025ab6a6b910 .functor BUFT 1, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0>, C4<0>, C4<0>;
v0000025ab69078c0_0 .net/2u *"_ivl_0", 63 0, L_0000025ab6a6b910;  1 drivers
v0000025ab6906560_0 .net "a", 63 0, L_0000025ab69e5a30;  alias, 1 drivers
v0000025ab6907780_0 .net "alu_control", 2 0, v0000025ab6907fa0_0;  alias, 1 drivers
v0000025ab6906ba0_0 .net "b", 63 0, L_0000025ab6a69c50;  alias, 1 drivers
v0000025ab6906600_0 .var "result", 63 0;
v0000025ab6907960_0 .net "zero", 0 0, L_0000025ab6a69ed0;  alias, 1 drivers
E_0000025ab68e5ff0 .event anyedge, v0000025ab6907fa0_0, v0000025ab6906560_0, v0000025ab6906ba0_0;
L_0000025ab6a69ed0 .cmp/eq 64, v0000025ab6906600_0, L_0000025ab6a6b910;
S_0000025ab68af3f0 .scope module, "rf" "reg_file" 7 37, 9 1 0, S_0000025ab68b5910;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 1 "rst";
    .port_info 2 /INPUT 5 "rd_addr1";
    .port_info 3 /OUTPUT 64 "rd_data1";
    .port_info 4 /INPUT 5 "rd_addr2";
    .port_info 5 /OUTPUT 64 "rd_data2";
    .port_info 6 /INPUT 5 "wr_addr";
    .port_info 7 /INPUT 64 "wr_data";
    .port_info 8 /INPUT 1 "wr_enable";
    .port_info 9 /OUTPUT 64 "debug_output";
L_0000025ab69e5a30 .functor BUFZ 64, L_0000025ab6a6b230, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0000000000000000000000000000000000000000000000000000000000000000>;
L_0000025ab69e5aa0 .functor BUFZ 64, L_0000025ab6a6b5f0, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0000000000000000000000000000000000000000000000000000000000000000>;
v0000025ab68df2b0_31 .array/port v0000025ab68df2b0, 31;
L_0000025ab69e5870 .functor BUFZ 64, v0000025ab68df2b0_31, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0000000000000000000000000000000000000000000000000000000000000000>;
v0000025ab69069c0_0 .net *"_ivl_0", 63 0, L_0000025ab6a6b230;  1 drivers
v0000025ab6906f60_0 .net *"_ivl_10", 6 0, L_0000025ab6a69750;  1 drivers
L_0000025ab6a6b8c8 .functor BUFT 1, C4<00>, C4<0>, C4<0>, C4<0>;
v0000025ab6906a60_0 .net *"_ivl_13", 1 0, L_0000025ab6a6b8c8;  1 drivers
v0000025ab6907b40_0 .net *"_ivl_2", 6 0, L_0000025ab6a6b2d0;  1 drivers
L_0000025ab6a6b880 .functor BUFT 1, C4<00>, C4<0>, C4<0>, C4<0>;
v0000025ab69073c0_0 .net *"_ivl_5", 1 0, L_0000025ab6a6b880;  1 drivers
v0000025ab6906ce0_0 .net *"_ivl_8", 63 0, L_0000025ab6a6b5f0;  1 drivers
v0000025ab6907dc0_0 .net "clk", 0 0, v0000025ab6a5fcd0_0;  alias, 1 drivers
v0000025ab6907e60_0 .net "debug_output", 63 0, L_0000025ab69e5870;  alias, 1 drivers
v0000025ab6907460_0 .net "rd_addr1", 4 0, v0000025ab6a5bce0_0;  1 drivers
v0000025ab6906d80_0 .net "rd_addr2", 4 0, v0000025ab6a5b380_0;  1 drivers
v0000025ab6906e20_0 .net "rd_data1", 63 0, L_0000025ab69e5a30;  alias, 1 drivers
v0000025ab6906ec0_0 .net "rd_data2", 63 0, L_0000025ab69e5aa0;  alias, 1 drivers
v0000025ab68df2b0 .array "registers", 0 31, 63 0;
v0000025ab68def90_0 .net "rst", 0 0, v0000025ab6a60310_0;  alias, 1 drivers
v0000025ab6a5b740_0 .net "wr_addr", 4 0, L_0000025ab6a6a790;  alias, 1 drivers
v0000025ab6a5bec0_0 .net "wr_data", 63 0, L_0000025ab6a6a010;  alias, 1 drivers
v0000025ab6a5b6a0_0 .net "wr_enable", 0 0, v0000025ab69064c0_0;  alias, 1 drivers
L_0000025ab6a6b230 .array/port v0000025ab68df2b0, L_0000025ab6a6b2d0;
L_0000025ab6a6b2d0 .concat [ 5 2 0 0], v0000025ab6a5bce0_0, L_0000025ab6a6b880;
L_0000025ab6a6b5f0 .array/port v0000025ab68df2b0, L_0000025ab6a69750;
L_0000025ab6a69750 .concat [ 5 2 0 0], v0000025ab6a5b380_0, L_0000025ab6a6b8c8;
S_0000025ab68aecb0 .scope begin, "$ivl_for_loop4" "$ivl_for_loop4" 9 18, 9 18 0, S_0000025ab68af3f0;
 .timescale 0 0;
v0000025ab69070a0_0 .var/2s "i", 31 0;
S_0000025ab68aee40 .scope module, "instr_mem_inst" "instr_mem" 4 36, 10 1 0, S_0000025ab685a230;
 .timescale 0 0;
    .port_info 0 /INPUT 32 "address";
    .port_info 1 /OUTPUT 32 "instruction";
P_0000025ab69d9e20 .param/str "mem_file" 0 10 3, "program.mem";
P_0000025ab69d9e58 .param/l "mem_size" 0 10 2, +C4<00000000000000000000000100000000>;
L_0000025ab69e55d0 .functor BUFZ 32, L_0000025ab6a6a830, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>, C4<00000000000000000000000000000000>;
v0000025ab6a5aac0_0 .net *"_ivl_0", 31 0, L_0000025ab6a6a830;  1 drivers
v0000025ab6a5b1a0_0 .net *"_ivl_3", 29 0, L_0000025ab6a69b10;  1 drivers
v0000025ab6a5bb00_0 .net "address", 31 0, L_0000025ab6a6b370;  1 drivers
v0000025ab6a5b7e0_0 .net "instruction", 31 0, L_0000025ab69e55d0;  alias, 1 drivers
v0000025ab6a5b880 .array "memory", 0 255, 31 0;
L_0000025ab6a6a830 .array/port v0000025ab6a5b880, L_0000025ab6a69b10;
L_0000025ab6a69b10 .part L_0000025ab6a6b370, 2, 30;
S_0000025ab68a6fc0 .scope begin, "$ivl_for_loop3" "$ivl_for_loop3" 10 13, 10 13 0, S_0000025ab68aee40;
 .timescale 0 0;
v0000025ab6a5c000_0 .var/2s "i", 31 0;
S_0000025ab6a5e8b0 .scope module, "pc_module" "pc_logic" 4 26, 11 1 0, S_0000025ab685a230;
 .timescale 0 0;
    .port_info 0 /INPUT 1 "clk";
    .port_info 1 /INPUT 1 "rst";
    .port_info 2 /INPUT 1 "branch";
    .port_info 3 /INPUT 1 "zero";
    .port_info 4 /INPUT 64 "imm";
    .port_info 5 /OUTPUT 64 "pc";
v0000025ab6a5bc40_0 .net "branch", 0 0, v0000025ab6907820_0;  alias, 1 drivers
v0000025ab6a5b2e0_0 .net "clk", 0 0, v0000025ab6a5fcd0_0;  alias, 1 drivers
v0000025ab6a5c1e0_0 .net "imm", 63 0, L_0000025ab6a69bb0;  alias, 1 drivers
v0000025ab6a5c280_0 .var "pc", 63 0;
v0000025ab6a5bd80_0 .net "rst", 0 0, v0000025ab6a60310_0;  alias, 1 drivers
v0000025ab6a5c0a0_0 .net "zero", 0 0, L_0000025ab6a69ed0;  alias, 1 drivers
S_0000025ab6a5ed60 .scope module, "sign_ext_inst" "sign_extend" 4 42, 12 1 0, S_0000025ab685a230;
 .timescale 0 0;
    .port_info 0 /INPUT 32 "instr";
    .port_info 1 /OUTPUT 64 "imm_out";
v0000025ab6a5c320_0 .net *"_ivl_11", 0 0, L_0000025ab6a6b4b0;  1 drivers
v0000025ab6a5b9c0_0 .net *"_ivl_12", 51 0, L_0000025ab6a6aab0;  1 drivers
v0000025ab6a5c460_0 .net *"_ivl_15", 6 0, L_0000025ab6a6a5b0;  1 drivers
v0000025ab6a5c500_0 .net *"_ivl_17", 4 0, L_0000025ab6a6ab50;  1 drivers
v0000025ab6a5a700_0 .net *"_ivl_21", 0 0, L_0000025ab6a6add0;  1 drivers
v0000025ab6a5ba60_0 .net *"_ivl_22", 50 0, L_0000025ab6a6a650;  1 drivers
v0000025ab6a5a840_0 .net *"_ivl_25", 0 0, L_0000025ab6a6a470;  1 drivers
v0000025ab6a5a980_0 .net *"_ivl_27", 0 0, L_0000025ab6a6ac90;  1 drivers
v0000025ab6a5aa20_0 .net *"_ivl_29", 5 0, L_0000025ab6a6a510;  1 drivers
v0000025ab6a5ad40_0 .net *"_ivl_3", 0 0, L_0000025ab6a6aa10;  1 drivers
v0000025ab6a5ade0_0 .net *"_ivl_31", 3 0, L_0000025ab6a6ae70;  1 drivers
L_0000025ab6a6b718 .functor BUFT 1, C4<0>, C4<0>, C4<0>, C4<0>;
v0000025ab6a5b060_0 .net/2u *"_ivl_32", 0 0, L_0000025ab6a6b718;  1 drivers
L_0000025ab6a6b760 .functor BUFT 1, C4<0000011>, C4<0>, C4<0>, C4<0>;
v0000025ab6a60ef0_0 .net/2u *"_ivl_36", 6 0, L_0000025ab6a6b760;  1 drivers
v0000025ab6a5fb90_0 .net *"_ivl_38", 0 0, L_0000025ab6a6b550;  1 drivers
v0000025ab6a60d10_0 .net *"_ivl_4", 51 0, L_0000025ab6a6abf0;  1 drivers
L_0000025ab6a6b7a8 .functor BUFT 1, C4<0100011>, C4<0>, C4<0>, C4<0>;
v0000025ab6a60130_0 .net/2u *"_ivl_40", 6 0, L_0000025ab6a6b7a8;  1 drivers
v0000025ab6a5fc30_0 .net *"_ivl_42", 0 0, L_0000025ab6a6ad30;  1 drivers
L_0000025ab6a6b7f0 .functor BUFT 1, C4<1100011>, C4<0>, C4<0>, C4<0>;
v0000025ab6a60b30_0 .net/2u *"_ivl_44", 6 0, L_0000025ab6a6b7f0;  1 drivers
v0000025ab6a60a90_0 .net *"_ivl_46", 0 0, L_0000025ab6a69d90;  1 drivers
L_0000025ab6a6b838 .functor BUFT 1, C4<0000000000000000000000000000000000000000000000000000000000000000>, C4<0>, C4<0>, C4<0>;
v0000025ab6a61490_0 .net/2u *"_ivl_48", 63 0, L_0000025ab6a6b838;  1 drivers
v0000025ab6a613f0_0 .net *"_ivl_50", 63 0, L_0000025ab6a69a70;  1 drivers
v0000025ab6a61530_0 .net *"_ivl_52", 63 0, L_0000025ab6a6b190;  1 drivers
v0000025ab6a60db0_0 .net *"_ivl_7", 11 0, L_0000025ab6a69cf0;  1 drivers
v0000025ab6a5f730_0 .net "b_imm_ext", 63 0, L_0000025ab6a69f70;  1 drivers
v0000025ab6a60630_0 .net "i_imm_ext", 63 0, L_0000025ab6a699d0;  1 drivers
v0000025ab6a603b0_0 .net "imm_out", 63 0, L_0000025ab6a69bb0;  alias, 1 drivers
v0000025ab6a60950_0 .net "instr", 31 0, L_0000025ab69e55d0;  alias, 1 drivers
v0000025ab6a5faf0_0 .net "opcode", 6 0, L_0000025ab6a6a970;  1 drivers
v0000025ab6a5f9b0_0 .net "s_imm_ext", 63 0, L_0000025ab6a6af10;  1 drivers
L_0000025ab6a6a970 .part L_0000025ab69e55d0, 0, 7;
L_0000025ab6a6aa10 .part L_0000025ab69e55d0, 31, 1;
LS_0000025ab6a6abf0_0_0 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_4 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_8 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_12 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_16 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_20 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_24 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_28 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_32 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_36 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_40 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_44 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_0_48 .concat [ 1 1 1 1], L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10, L_0000025ab6a6aa10;
LS_0000025ab6a6abf0_1_0 .concat [ 4 4 4 4], LS_0000025ab6a6abf0_0_0, LS_0000025ab6a6abf0_0_4, LS_0000025ab6a6abf0_0_8, LS_0000025ab6a6abf0_0_12;
LS_0000025ab6a6abf0_1_4 .concat [ 4 4 4 4], LS_0000025ab6a6abf0_0_16, LS_0000025ab6a6abf0_0_20, LS_0000025ab6a6abf0_0_24, LS_0000025ab6a6abf0_0_28;
LS_0000025ab6a6abf0_1_8 .concat [ 4 4 4 4], LS_0000025ab6a6abf0_0_32, LS_0000025ab6a6abf0_0_36, LS_0000025ab6a6abf0_0_40, LS_0000025ab6a6abf0_0_44;
LS_0000025ab6a6abf0_1_12 .concat [ 4 0 0 0], LS_0000025ab6a6abf0_0_48;
L_0000025ab6a6abf0 .concat [ 16 16 16 4], LS_0000025ab6a6abf0_1_0, LS_0000025ab6a6abf0_1_4, LS_0000025ab6a6abf0_1_8, LS_0000025ab6a6abf0_1_12;
L_0000025ab6a69cf0 .part L_0000025ab69e55d0, 20, 12;
L_0000025ab6a699d0 .concat [ 12 52 0 0], L_0000025ab6a69cf0, L_0000025ab6a6abf0;
L_0000025ab6a6b4b0 .part L_0000025ab69e55d0, 31, 1;
LS_0000025ab6a6aab0_0_0 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_4 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_8 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_12 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_16 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_20 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_24 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_28 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_32 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_36 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_40 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_44 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_0_48 .concat [ 1 1 1 1], L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0, L_0000025ab6a6b4b0;
LS_0000025ab6a6aab0_1_0 .concat [ 4 4 4 4], LS_0000025ab6a6aab0_0_0, LS_0000025ab6a6aab0_0_4, LS_0000025ab6a6aab0_0_8, LS_0000025ab6a6aab0_0_12;
LS_0000025ab6a6aab0_1_4 .concat [ 4 4 4 4], LS_0000025ab6a6aab0_0_16, LS_0000025ab6a6aab0_0_20, LS_0000025ab6a6aab0_0_24, LS_0000025ab6a6aab0_0_28;
LS_0000025ab6a6aab0_1_8 .concat [ 4 4 4 4], LS_0000025ab6a6aab0_0_32, LS_0000025ab6a6aab0_0_36, LS_0000025ab6a6aab0_0_40, LS_0000025ab6a6aab0_0_44;
LS_0000025ab6a6aab0_1_12 .concat [ 4 0 0 0], LS_0000025ab6a6aab0_0_48;
L_0000025ab6a6aab0 .concat [ 16 16 16 4], LS_0000025ab6a6aab0_1_0, LS_0000025ab6a6aab0_1_4, LS_0000025ab6a6aab0_1_8, LS_0000025ab6a6aab0_1_12;
L_0000025ab6a6a5b0 .part L_0000025ab69e55d0, 25, 7;
L_0000025ab6a6ab50 .part L_0000025ab69e55d0, 7, 5;
L_0000025ab6a6af10 .concat [ 5 7 52 0], L_0000025ab6a6ab50, L_0000025ab6a6a5b0, L_0000025ab6a6aab0;
L_0000025ab6a6add0 .part L_0000025ab69e55d0, 31, 1;
LS_0000025ab6a6a650_0_0 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_4 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_8 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_12 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_16 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_20 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_24 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_28 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_32 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_36 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_40 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_44 .concat [ 1 1 1 1], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_0_48 .concat [ 1 1 1 0], L_0000025ab6a6add0, L_0000025ab6a6add0, L_0000025ab6a6add0;
LS_0000025ab6a6a650_1_0 .concat [ 4 4 4 4], LS_0000025ab6a6a650_0_0, LS_0000025ab6a6a650_0_4, LS_0000025ab6a6a650_0_8, LS_0000025ab6a6a650_0_12;
LS_0000025ab6a6a650_1_4 .concat [ 4 4 4 4], LS_0000025ab6a6a650_0_16, LS_0000025ab6a6a650_0_20, LS_0000025ab6a6a650_0_24, LS_0000025ab6a6a650_0_28;
LS_0000025ab6a6a650_1_8 .concat [ 4 4 4 4], LS_0000025ab6a6a650_0_32, LS_0000025ab6a6a650_0_36, LS_0000025ab6a6a650_0_40, LS_0000025ab6a6a650_0_44;
LS_0000025ab6a6a650_1_12 .concat [ 3 0 0 0], LS_0000025ab6a6a650_0_48;
L_0000025ab6a6a650 .concat [ 16 16 16 3], LS_0000025ab6a6a650_1_0, LS_0000025ab6a6a650_1_4, LS_0000025ab6a6a650_1_8, LS_0000025ab6a6a650_1_12;
L_0000025ab6a6a470 .part L_0000025ab69e55d0, 31, 1;
L_0000025ab6a6ac90 .part L_0000025ab69e55d0, 7, 1;
L_0000025ab6a6a510 .part L_0000025ab69e55d0, 25, 6;
L_0000025ab6a6ae70 .part L_0000025ab69e55d0, 8, 4;
LS_0000025ab6a69f70_0_0 .concat [ 1 4 6 1], L_0000025ab6a6b718, L_0000025ab6a6ae70, L_0000025ab6a6a510, L_0000025ab6a6ac90;
LS_0000025ab6a69f70_0_4 .concat [ 1 51 0 0], L_0000025ab6a6a470, L_0000025ab6a6a650;
L_0000025ab6a69f70 .concat [ 12 52 0 0], LS_0000025ab6a69f70_0_0, LS_0000025ab6a69f70_0_4;
L_0000025ab6a6b550 .cmp/eq 7, L_0000025ab6a6a970, L_0000025ab6a6b760;
L_0000025ab6a6ad30 .cmp/eq 7, L_0000025ab6a6a970, L_0000025ab6a6b7a8;
L_0000025ab6a69d90 .cmp/eq 7, L_0000025ab6a6a970, L_0000025ab6a6b7f0;
L_0000025ab6a69a70 .functor MUXZ 64, L_0000025ab6a6b838, L_0000025ab6a69f70, L_0000025ab6a69d90, C4<>;
L_0000025ab6a6b190 .functor MUXZ 64, L_0000025ab6a69a70, L_0000025ab6a6af10, L_0000025ab6a6ad30, C4<>;
L_0000025ab6a69bb0 .functor MUXZ 64, L_0000025ab6a6b190, L_0000025ab6a699d0, L_0000025ab6a6b550, C4<>;
S_0000025ab6a5eef0 .scope task, "verify_paper_instruction" "verify_paper_instruction" 3 189, 3 189 0, S_0000025ab69f35d0;
 .timescale 0 0;
v0000025ab6a61030_0 .var "exp_pc", 63 0;
v0000025ab6a60590_0 .var/str "expected_behavior";
v0000025ab6a610d0_0 .var/str "instr_name";
TD_tb_single_cycle_cpu_paper.verify_paper_instruction ;
    %load/vec4 v0000025ab6a60e50_0;
    %load/vec4 v0000025ab6a61030_0;
    %cmp/ne;
    %jmp/0xz  T_2.31, 6;
    %vpi_call/w 3 191 "$error", "%s: PC mismatch. Expected: 0x%h, Got: 0x%h", v0000025ab6a610d0_0, v0000025ab6a61030_0, v0000025ab6a60e50_0 {0 0 0};
    %jmp T_2.32;
T_2.31 ;
    %vpi_call/w 3 193 "$display", "\342\234\223 %s: PC correct (0x%h) - %s", v0000025ab6a610d0_0, v0000025ab6a60e50_0, v0000025ab6a60590_0 {0 0 0};
T_2.32 ;
    %end;
S_0000025ab6a5f3a0 .scope task, "wait_cycles" "wait_cycles" 3 184, 3 184 0, S_0000025ab69f35d0;
 .timescale 0 0;
v0000025ab6a61170_0 .var/2s "n", 31 0;
E_0000025ab68e6930 .event posedge, v0000025ab6906920_0;
TD_tb_single_cycle_cpu_paper.wait_cycles ;
    %load/vec4 v0000025ab6a61170_0;
T_3.33 %dup/vec4;
    %pushi/vec4 0, 0, 32;
    %cmp/s;
    %jmp/1xz T_3.34, 5;
    %jmp/1 T_3.34, 4;
    %pushi/vec4 1, 0, 32;
    %sub;
    %wait E_0000025ab68e6930;
    %jmp T_3.33;
T_3.34 ;
    %pop/vec4 1;
    %end;
    .scope S_0000025ab6a5e8b0;
T_4 ;
    %wait E_0000025ab68e6c70;
    %load/vec4 v0000025ab6a5bd80_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_4.0, 8;
    %pushi/vec4 0, 0, 64;
    %assign/vec4 v0000025ab6a5c280_0, 0;
    %jmp T_4.1;
T_4.0 ;
    %load/vec4 v0000025ab6a5bc40_0;
    %flag_set/vec4 9;
    %flag_get/vec4 9;
    %jmp/0 T_4.4, 9;
    %load/vec4 v0000025ab6a5c0a0_0;
    %and;
T_4.4;
    %flag_set/vec4 8;
    %jmp/0xz  T_4.2, 8;
    %load/vec4 v0000025ab6a5c280_0;
    %load/vec4 v0000025ab6a5c1e0_0;
    %add;
    %assign/vec4 v0000025ab6a5c280_0, 0;
    %jmp T_4.3;
T_4.2 ;
    %load/vec4 v0000025ab6a5c280_0;
    %addi 4, 0, 64;
    %assign/vec4 v0000025ab6a5c280_0, 0;
T_4.3 ;
T_4.1 ;
    %jmp T_4;
    .thread T_4;
    .scope S_0000025ab68aee40;
T_5 ;
    %fork t_1, S_0000025ab68a6fc0;
    %jmp t_0;
    .scope S_0000025ab68a6fc0;
t_1 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a5c000_0, 0, 32;
T_5.0 ;
    %load/vec4 v0000025ab6a5c000_0;
    %cmpi/s 256, 0, 32;
    %jmp/0xz T_5.1, 5;
    %pushi/vec4 3, 0, 32;
    %ix/getv/s 4, v0000025ab6a5c000_0;
    %store/vec4a v0000025ab6a5b880, 4, 0;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5c000_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5c000_0, 0, 32;
    %jmp T_5.0;
T_5.1 ;
    %end;
    .scope S_0000025ab68aee40;
t_0 %join;
    %vpi_call/w 10 18 "$readmemh", P_0000025ab69d9e20, v0000025ab6a5b880 {0 0 0};
    %end;
    .thread T_5;
    .scope S_0000025ab685a3c0;
T_6 ;
Ewait_0 .event/or E_0000025ab68e67f0, E_0x0;
    %wait Ewait_0;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69064c0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6906740_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907140_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69075a0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6908040_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907820_0, 0, 1;
    %load/vec4 v0000025ab69080e0_0;
    %dup/vec4;
    %pushi/vec4 3, 0, 7;
    %cmp/u;
    %jmp/1 T_6.0, 6;
    %dup/vec4;
    %pushi/vec4 35, 0, 7;
    %cmp/u;
    %jmp/1 T_6.1, 6;
    %dup/vec4;
    %pushi/vec4 51, 0, 7;
    %cmp/u;
    %jmp/1 T_6.2, 6;
    %dup/vec4;
    %pushi/vec4 99, 0, 7;
    %cmp/u;
    %jmp/1 T_6.3, 6;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69064c0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6906740_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907140_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69075a0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6908040_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907820_0, 0, 1;
    %vpi_call/w 5 109 "$display", "Warning: Unknown opcode 0x%h encountered", v0000025ab69080e0_0 {0 0 0};
    %jmp T_6.5;
T_6.0 ;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab69064c0_0, 0, 1;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab6906740_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907140_0, 0, 1;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab69075a0_0, 0, 1;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab6908040_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907820_0, 0, 1;
    %jmp T_6.5;
T_6.1 ;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69064c0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6906740_0, 0, 1;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab6907140_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69075a0_0, 0, 1;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab6908040_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907820_0, 0, 1;
    %jmp T_6.5;
T_6.2 ;
    %load/vec4 v0000025ab6906240_0;
    %dup/vec4;
    %pushi/vec4 0, 0, 3;
    %cmp/u;
    %jmp/1 T_6.6, 6;
    %dup/vec4;
    %pushi/vec4 7, 0, 3;
    %cmp/u;
    %jmp/1 T_6.7, 6;
    %dup/vec4;
    %pushi/vec4 6, 0, 3;
    %cmp/u;
    %jmp/1 T_6.8, 6;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %jmp T_6.10;
T_6.6 ;
    %load/vec4 v0000025ab6907280_0;
    %cmpi/e 0, 0, 7;
    %jmp/0xz  T_6.11, 4;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %jmp T_6.12;
T_6.11 ;
    %load/vec4 v0000025ab6907280_0;
    %cmpi/e 32, 0, 7;
    %jmp/0xz  T_6.13, 4;
    %pushi/vec4 1, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %jmp T_6.14;
T_6.13 ;
    %pushi/vec4 0, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
T_6.14 ;
T_6.12 ;
    %jmp T_6.10;
T_6.7 ;
    %pushi/vec4 2, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %jmp T_6.10;
T_6.8 ;
    %pushi/vec4 3, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %jmp T_6.10;
T_6.10 ;
    %pop/vec4 1;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab69064c0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6906740_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907140_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69075a0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6908040_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907820_0, 0, 1;
    %jmp T_6.5;
T_6.3 ;
    %pushi/vec4 1, 0, 3;
    %store/vec4 v0000025ab6907fa0_0, 0, 3;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69064c0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6906740_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6907140_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab69075a0_0, 0, 1;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6908040_0, 0, 1;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab6907820_0, 0, 1;
    %jmp T_6.5;
T_6.5 ;
    %pop/vec4 1;
    %jmp T_6;
    .thread T_6, $push;
    .scope S_0000025ab68b9340;
T_7 ;
    %load/vec4 v0000025ab6907a00_0;
    %parti/s 29, 3, 3;
    %pad/u 32;
    %store/vec4 v0000025ab6906420_0, 0, 32;
    %end;
    .thread T_7, $init;
    .scope S_0000025ab68b9340;
T_8 ;
    %fork t_3, S_0000025ab68b94d0;
    %jmp t_2;
    .scope S_0000025ab68b94d0;
t_3 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6906b00_0, 0, 32;
T_8.0 ;
    %load/vec4 v0000025ab6906b00_0;
    %cmpi/s 256, 0, 32;
    %jmp/0xz T_8.1, 5;
    %pushi/vec4 0, 0, 64;
    %ix/getv/s 4, v0000025ab6906b00_0;
    %store/vec4a v0000025ab6907c80, 4, 0;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6906b00_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6906b00_0, 0, 32;
    %jmp T_8.0;
T_8.1 ;
    %end;
    .scope S_0000025ab68b9340;
t_2 %join;
    %vpi_call/w 6 25 "$readmemh", P_0000025ab68bc158, v0000025ab6907c80, 32'sb00000000000000000000000000000000, 32'sb00000000000000000000000000001111 {0 0 0};
    %end;
    .thread T_8;
    .scope S_0000025ab68b9340;
T_9 ;
    %wait E_0000025ab68e6c70;
    %load/vec4 v0000025ab6906380_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_9.0, 8;
    %fork t_5, S_0000025ab68b5780;
    %jmp t_4;
    .scope S_0000025ab68b5780;
t_5 ;
    %pushi/vec4 16, 0, 32;
    %store/vec4 v0000025ab69067e0_0, 0, 32;
T_9.2 ;
    %load/vec4 v0000025ab69067e0_0;
    %cmpi/s 256, 0, 32;
    %jmp/0xz T_9.3, 5;
    %pushi/vec4 0, 0, 64;
    %ix/getv/s 3, v0000025ab69067e0_0;
    %ix/load 4, 0, 0; Constant delay
    %assign/vec4/a/d v0000025ab6907c80, 0, 4;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab69067e0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab69067e0_0, 0, 32;
    %jmp T_9.2;
T_9.3 ;
    %end;
    .scope S_0000025ab68b9340;
t_4 %join;
    %jmp T_9.1;
T_9.0 ;
    %load/vec4 v0000025ab69066a0_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_9.4, 8;
    %load/vec4 v0000025ab6906420_0;
    %cmpi/u 16, 0, 32;
    %flag_inv 5; GE is !LT
    %jmp/0xz  T_9.6, 5;
    %load/vec4 v0000025ab6907aa0_0;
    %ix/getv 3, v0000025ab6906420_0;
    %ix/load 4, 0, 0; Constant delay
    %assign/vec4/a/d v0000025ab6907c80, 0, 4;
    %jmp T_9.7;
T_9.6 ;
    %vpi_call/w 6 40 "$display", "Attempt to write to ROM region" {0 0 0};
T_9.7 ;
T_9.4 ;
T_9.1 ;
    %jmp T_9;
    .thread T_9;
    .scope S_0000025ab68b9340;
T_10 ;
Ewait_1 .event/or E_0000025ab68e6bb0, E_0x0;
    %wait Ewait_1;
    %load/vec4 v0000025ab6907320_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_10.0, 8;
    %ix/getv 4, v0000025ab6906420_0;
    %load/vec4a v0000025ab6907c80, 4;
    %store/vec4 v0000025ab69076e0_0, 0, 64;
    %jmp T_10.1;
T_10.0 ;
    %pushi/vec4 0, 0, 64;
    %store/vec4 v0000025ab69076e0_0, 0, 64;
T_10.1 ;
    %jmp T_10;
    .thread T_10, $push;
    .scope S_0000025ab68af3f0;
T_11 ;
    %wait E_0000025ab68e6c70;
    %load/vec4 v0000025ab68def90_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_11.0, 8;
    %fork t_7, S_0000025ab68aecb0;
    %jmp t_6;
    .scope S_0000025ab68aecb0;
t_7 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab69070a0_0, 0, 32;
T_11.2 ;
    %load/vec4 v0000025ab69070a0_0;
    %cmpi/s 32, 0, 32;
    %jmp/0xz T_11.3, 5;
    %pushi/vec4 0, 0, 64;
    %ix/getv/s 3, v0000025ab69070a0_0;
    %ix/load 4, 0, 0; Constant delay
    %assign/vec4/a/d v0000025ab68df2b0, 0, 4;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab69070a0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab69070a0_0, 0, 32;
    %jmp T_11.2;
T_11.3 ;
    %end;
    .scope S_0000025ab68af3f0;
t_6 %join;
    %jmp T_11.1;
T_11.0 ;
    %load/vec4 v0000025ab6a5b6a0_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_11.4, 8;
    %load/vec4 v0000025ab6a5bec0_0;
    %load/vec4 v0000025ab6a5b740_0;
    %pad/u 7;
    %ix/vec4 3;
    %ix/load 4, 0, 0; Constant delay
    %assign/vec4/a/d v0000025ab68df2b0, 0, 4;
T_11.4 ;
T_11.1 ;
    %jmp T_11;
    .thread T_11;
    .scope S_0000025ab68af260;
T_12 ;
Ewait_2 .event/or E_0000025ab68e5ff0, E_0x0;
    %wait Ewait_2;
    %load/vec4 v0000025ab6907780_0;
    %dup/vec4;
    %pushi/vec4 0, 0, 3;
    %cmp/u;
    %jmp/1 T_12.0, 6;
    %dup/vec4;
    %pushi/vec4 1, 0, 3;
    %cmp/u;
    %jmp/1 T_12.1, 6;
    %dup/vec4;
    %pushi/vec4 2, 0, 3;
    %cmp/u;
    %jmp/1 T_12.2, 6;
    %dup/vec4;
    %pushi/vec4 3, 0, 3;
    %cmp/u;
    %jmp/1 T_12.3, 6;
    %pushi/vec4 0, 0, 64;
    %store/vec4 v0000025ab6906600_0, 0, 64;
    %jmp T_12.5;
T_12.0 ;
    %load/vec4 v0000025ab6906560_0;
    %load/vec4 v0000025ab6906ba0_0;
    %add;
    %store/vec4 v0000025ab6906600_0, 0, 64;
    %jmp T_12.5;
T_12.1 ;
    %load/vec4 v0000025ab6906560_0;
    %load/vec4 v0000025ab6906ba0_0;
    %sub;
    %store/vec4 v0000025ab6906600_0, 0, 64;
    %jmp T_12.5;
T_12.2 ;
    %load/vec4 v0000025ab6906560_0;
    %load/vec4 v0000025ab6906ba0_0;
    %and;
    %store/vec4 v0000025ab6906600_0, 0, 64;
    %jmp T_12.5;
T_12.3 ;
    %load/vec4 v0000025ab6906560_0;
    %load/vec4 v0000025ab6906ba0_0;
    %or;
    %store/vec4 v0000025ab6906600_0, 0, 64;
    %jmp T_12.5;
T_12.5 ;
    %pop/vec4 1;
    %jmp T_12;
    .thread T_12, $push;
    .scope S_0000025ab68b5910;
T_13 ;
    %load/vec4 v0000025ab6a5afc0_0;
    %parti/s 5, 15, 5;
    %store/vec4 v0000025ab6a5bce0_0, 0, 5;
    %load/vec4 v0000025ab6a5afc0_0;
    %parti/s 5, 20, 6;
    %store/vec4 v0000025ab6a5b380_0, 0, 5;
    %end;
    .thread T_13, $init;
    .scope S_0000025ab69f35d0;
T_14 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a60270_0, 0, 32;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a60770_0, 0, 32;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a608b0_0, 0, 32;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a60090_0, 0, 32;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a6b410_0, 0, 32;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a5f910_0, 0, 32;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a60810_0, 0, 32;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a5fa50_0, 0, 32;
    %end;
    .thread T_14, $init;
    .scope S_0000025ab69f35d0;
T_15 ;
    %delay 5, 0;
    %load/vec4 v0000025ab6a5fcd0_0;
    %inv;
    %store/vec4 v0000025ab6a5fcd0_0, 0, 1;
    %jmp T_15;
    .thread T_15;
    .scope S_0000025ab69f35d0;
T_16 ;
    %vpi_call/w 3 199 "$dumpfile", "cpu_waves.vcd" {0 0 0};
    %vpi_call/w 3 200 "$dumpvars", 32'sb00000000000000000000000000000000, S_0000025ab69f35d0 {0 0 0};
    %vpi_call/w 3 202 "$display", "========================================" {0 0 0};
    %vpi_call/w 3 203 "$display", "RISC-V CPU TESTBENCH - PAPER INSTRUCTIONS ONLY (NO JUMP)" {0 0 0};
    %vpi_call/w 3 204 "$display", "Testing the 7 instructions from the research paper:" {0 0 0};
    %vpi_call/w 3 205 "$display", "1. LD (Load Double)" {0 0 0};
    %vpi_call/w 3 206 "$display", "2. SD (Store Double)" {0 0 0};
    %vpi_call/w 3 207 "$display", "3. ADD (Addition)" {0 0 0};
    %vpi_call/w 3 208 "$display", "4. SUB (Subtraction)" {0 0 0};
    %vpi_call/w 3 209 "$display", "5. AND (Bitwise AND)" {0 0 0};
    %vpi_call/w 3 210 "$display", "6. OR (Bitwise OR)" {0 0 0};
    %vpi_call/w 3 211 "$display", "7. BEQ (Branch if Equal) - ONLY branching instruction" {0 0 0};
    %vpi_call/w 3 212 "$display", "========================================" {0 0 0};
    %fork TD_tb_single_cycle_cpu_paper.create_paper_test_files, S_0000025ab69f5770;
    %join;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6a5fcd0_0, 0, 1;
    %pushi/vec4 1, 0, 1;
    %store/vec4 v0000025ab6a60310_0, 0, 1;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    %vpi_call/w 3 223 "$display", "\012=== RESET PHASE ===" {0 0 0};
    %pushi/vec4 5, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/vec4 0, 0, 1;
    %store/vec4 v0000025ab6a60310_0, 0, 1;
    %vpi_call/w 3 227 "$display", "CPU Reset Complete - Testing paper instructions (no jump)..." {0 0 0};
    %pushi/str "RESET COMPLETE";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %vpi_call/w 3 230 "$display", "\012=== TESTING PAPER INSTRUCTION #1: LD (Load Double) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "LD x1";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "LD x1";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 4, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Load 5 into x1";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "LD x2";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "LD x2";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 8, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Load 3 into x2";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "LD x3";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "LD x3";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 12, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Load 2 into x3";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 250 "$display", "\012=== TESTING PAPER INSTRUCTION #3: ADD (Addition) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "ADD";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "ADD";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 16, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "x3 = x1 + x2 = 5 + 3 = 8";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 258 "$display", "\012=== TESTING PAPER INSTRUCTION #4: SUB (Subtraction) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "SUB";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "SUB";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 20, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "x4 = x1 - x2 = 5 - 3 = 2";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 266 "$display", "\012=== TESTING PAPER INSTRUCTION #5: AND (Bitwise AND) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "AND";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "AND";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 24, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "x5 = x1 & x2 = 5 & 3 = 1";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 274 "$display", "\012=== TESTING PAPER INSTRUCTION #6: OR (Bitwise OR) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "OR";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "OR";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 28, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "x6 = x1 | x2 = 5 | 3 = 7";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 282 "$display", "\012=== TESTING PAPER INSTRUCTION #1: LD (Load to Debug Register) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "LD x31";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "LD x31";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 32, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Load test pattern to debug register";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 290 "$display", "\012=== TESTING PAPER INSTRUCTION #2: SD (Store Double) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "SD x31";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "SD x31";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 36, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Store debug value to memory";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 298 "$display", "\012=== TESTING PAPER INSTRUCTION #7: BEQ (Branch Not Taken) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "BEQ NOT TAKEN";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "BEQ NOT TAKEN";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 40, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Branch not taken (5 != 3)";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "LD after branch";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "LD after branch";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 44, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Execute after branch not taken";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 312 "$display", "\012=== TESTING PAPER INSTRUCTION #7: BEQ (Branch Taken) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "BEQ TAKEN";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "BEQ TAKEN";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 52, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Branch taken (5 == 5)";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "LD branch target";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "LD branch target";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 56, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Execute at branch target";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 326 "$display", "\012=== TESTING PAPER INSTRUCTION #7: BEQ (Infinite Loop) ===" {0 0 0};
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6a8d0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6a8d0_0, 0, 32;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %pushi/str "BEQ INFINITE LOOP";
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
    %pushi/str "BEQ INFINITE LOOP";
    %store/str v0000025ab6a610d0_0;
    %pushi/vec4 44, 0, 64;
    %store/vec4 v0000025ab6a61030_0, 0, 64;
    %pushi/str "Start infinite loop using BEQ only";
    %store/str v0000025ab6a60590_0;
    %fork TD_tb_single_cycle_cpu_paper.verify_paper_instruction, S_0000025ab6a5eef0;
    %join;
    %vpi_call/w 3 334 "$display", "\012=== VERIFYING INFINITE LOOP WITH BEQ ONLY ===" {0 0 0};
    %fork t_9, S_0000025ab69e9af0;
    %jmp t_8;
    .scope S_0000025ab69e9af0;
t_9 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000025ab69062e0_0, 0, 32;
T_16.0 ;
    %load/vec4 v0000025ab69062e0_0;
    %cmpi/s 8, 0, 32;
    %jmp/0xz T_16.1, 5;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fff0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fff0_0, 0, 32;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v0000025ab6a61170_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.wait_cycles, S_0000025ab6a5f3a0;
    %join;
    %load/vec4 v0000025ab69062e0_0;
    %cmpi/s 3, 0, 32;
    %jmp/0xz  T_16.2, 5;
    %load/vec4 v0000025ab69062e0_0;
    %addi 1, 0, 32;
    %vpi_func/s 3 341 "$sformatf", "BEQ LOOP %0d", S<0,vec4,s32> {1 0 0};
    %store/str v0000025ab6906c40_0;
    %load/vec4 v0000025ab6a5fff0_0;
    %store/vec4 v0000025ab6907000_0, 0, 32;
    %fork TD_tb_single_cycle_cpu_paper.display_paper_cpu_state, S_0000025ab69edba0;
    %join;
T_16.2 ;
    %load/vec4 v0000025ab6a60e50_0;
    %cmpi/ne 44, 0, 64;
    %flag_get/vec4 4;
    %jmp/0 T_16.6, 4;
    %load/vec4 v0000025ab6a60e50_0;
    %pushi/vec4 56, 0, 64;
    %cmp/ne;
    %flag_get/vec4 4;
    %and;
T_16.6;
    %flag_set/vec4 8;
    %jmp/0xz  T_16.4, 8;
    %vpi_call/w 3 345 "$error", "BEQ infinite loop broken! PC = 0x%h (should be 0x2C or 0x38)", v0000025ab6a60e50_0 {0 0 0};
    %jmp T_16.5;
T_16.4 ;
    %load/vec4 v0000025ab69062e0_0;
    %cmpi/e 0, 0, 32;
    %jmp/0xz  T_16.7, 4;
    %vpi_call/w 3 347 "$display", "\342\234\223 BEQ infinite loop working correctly (no jump needed)" {0 0 0};
T_16.7 ;
T_16.5 ;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab69062e0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab69062e0_0, 0, 32;
    %jmp T_16.0;
T_16.1 ;
    %end;
    .scope S_0000025ab69f35d0;
t_8 %join;
    %vpi_call/w 3 351 "$display", "\012=== PAPER INSTRUCTION SUMMARY (NO JUMP) ===" {0 0 0};
    %vpi_call/w 3 352 "$display", "All 7 paper instructions tested successfully:" {0 0 0};
    %vpi_call/w 3 353 "$display", "\342\234\223 1. LD (Load Double) - Tested with multiple loads" {0 0 0};
    %vpi_call/w 3 354 "$display", "\342\234\223 2. SD (Store Double) - Tested with debug register store" {0 0 0};
    %vpi_call/w 3 355 "$display", "\342\234\223 3. ADD (Addition) - Tested with 5 + 3 = 8" {0 0 0};
    %vpi_call/w 3 356 "$display", "\342\234\223 4. SUB (Subtraction) - Tested with 5 - 3 = 2" {0 0 0};
    %vpi_call/w 3 357 "$display", "\342\234\223 5. AND (Bitwise AND) - Tested with 5 & 3 = 1" {0 0 0};
    %vpi_call/w 3 358 "$display", "\342\234\223 6. OR (Bitwise OR) - Tested with 5 | 3 = 7" {0 0 0};
    %vpi_call/w 3 359 "$display", "\342\234\223 7. BEQ (Branch if Equal) - ONLY branching instruction (no jump)" {0 0 0};
    %vpi_call/w 3 361 "$display", "\012=== FINAL STATE ===" {0 0 0};
    %vpi_call/w 3 362 "$display", "Final PC: 0x%h", v0000025ab6a60e50_0 {0 0 0};
    %vpi_call/w 3 363 "$display", "Final Debug Output: 0x%h", v0000025ab6a601d0_0 {0 0 0};
    %vpi_call/w 3 364 "$display", "CPU successfully executed all 7 paper instructions with BEQ-only branching!" {0 0 0};
    %vpi_call/w 3 366 "$display", "\012=== TESTBENCH COMPLETE ===" {0 0 0};
    %vpi_call/w 3 367 "$display", "Paper instruction testbench completed successfully!" {0 0 0};
    %vpi_call/w 3 368 "$display", "The processor correctly implements the minimal 7-instruction RISC-V set" {0 0 0};
    %vpi_call/w 3 369 "$display", "with BEQ as the ONLY branching mechanism (no jump instructions)." {0 0 0};
    %vpi_call/w 3 371 "$finish" {0 0 0};
    %end;
    .thread T_16;
    .scope S_0000025ab69f35d0;
T_17 ;
    %wait E_0000025ab68e6930;
    %load/vec4 v0000025ab6a60310_0;
    %nor/r;
    %flag_set/vec4 8;
    %jmp/0xz  T_17.0, 8;
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 7, 0, 2;
    %dup/vec4;
    %pushi/vec4 3, 0, 7;
    %cmp/u;
    %jmp/1 T_17.2, 6;
    %dup/vec4;
    %pushi/vec4 35, 0, 7;
    %cmp/u;
    %jmp/1 T_17.3, 6;
    %dup/vec4;
    %pushi/vec4 51, 0, 7;
    %cmp/u;
    %jmp/1 T_17.4, 6;
    %dup/vec4;
    %pushi/vec4 99, 0, 7;
    %cmp/u;
    %jmp/1 T_17.5, 6;
    %load/vec4 v0000025ab6a609f0_0;
    %cmpi/ne 19, 0, 32;
    %jmp/0xz  T_17.8, 6;
    %vpi_call/w 3 384 "$error", "NON-PAPER INSTRUCTION DETECTED! Opcode: 0x%h, Full instruction: 0x%h", &PV<v0000025ab6a609f0_0, 0, 7>, v0000025ab6a609f0_0 {0 0 0};
T_17.8 ;
    %jmp T_17.7;
T_17.2 ;
    %jmp T_17.7;
T_17.3 ;
    %jmp T_17.7;
T_17.4 ;
    %jmp T_17.7;
T_17.5 ;
    %jmp T_17.7;
T_17.7 ;
    %pop/vec4 1;
    %load/vec4 v0000025ab6a60bd0_0;
    %flag_set/vec4 9;
    %flag_get/vec4 9;
    %jmp/0 T_17.12, 9;
    %load/vec4 v0000025ab6a5ff50_0;
    %and;
T_17.12;
    %flag_set/vec4 8;
    %jmp/0xz  T_17.10, 8;
    %vpi_call/w 3 392 "$error", "ILLEGAL: Both memory read and write enabled simultaneously!" {0 0 0};
T_17.10 ;
T_17.0 ;
    %jmp T_17;
    .thread T_17;
    .scope S_0000025ab69f35d0;
T_18 ;
    %wait E_0000025ab68e6930;
    %load/vec4 v0000025ab6a60310_0;
    %nor/r;
    %flag_set/vec4 9;
    %flag_get/vec4 9;
    %jmp/0 T_18.2, 9;
    %load/vec4 v0000025ab6a609f0_0;
    %pushi/vec4 19, 0, 32;
    %cmp/ne;
    %flag_get/vec4 6;
    %and;
T_18.2;
    %flag_set/vec4 8;
    %jmp/0xz  T_18.0, 8;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a60270_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a60270_0, 0, 32;
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 7, 0, 2;
    %dup/vec4;
    %pushi/vec4 3, 0, 7;
    %cmp/u;
    %jmp/1 T_18.3, 6;
    %dup/vec4;
    %pushi/vec4 35, 0, 7;
    %cmp/u;
    %jmp/1 T_18.4, 6;
    %dup/vec4;
    %pushi/vec4 51, 0, 7;
    %cmp/u;
    %jmp/1 T_18.5, 6;
    %dup/vec4;
    %pushi/vec4 99, 0, 7;
    %cmp/u;
    %jmp/1 T_18.6, 6;
    %jmp T_18.7;
T_18.3 ;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a60770_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a60770_0, 0, 32;
    %jmp T_18.7;
T_18.4 ;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a608b0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a608b0_0, 0, 32;
    %jmp T_18.7;
T_18.5 ;
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 3, 12, 5;
    %dup/vec4;
    %pushi/vec4 0, 0, 3;
    %cmp/u;
    %jmp/1 T_18.8, 6;
    %dup/vec4;
    %pushi/vec4 7, 0, 3;
    %cmp/u;
    %jmp/1 T_18.9, 6;
    %dup/vec4;
    %pushi/vec4 6, 0, 3;
    %cmp/u;
    %jmp/1 T_18.10, 6;
    %jmp T_18.11;
T_18.8 ;
    %load/vec4 v0000025ab6a609f0_0;
    %parti/s 1, 30, 6;
    %flag_set/vec4 8;
    %jmp/0xz  T_18.12, 8;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a6b410_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a6b410_0, 0, 32;
    %jmp T_18.13;
T_18.12 ;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a60090_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a60090_0, 0, 32;
T_18.13 ;
    %jmp T_18.11;
T_18.9 ;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5f910_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5f910_0, 0, 32;
    %jmp T_18.11;
T_18.10 ;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a60810_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a60810_0, 0, 32;
    %jmp T_18.11;
T_18.11 ;
    %pop/vec4 1;
    %jmp T_18.7;
T_18.6 ;
    %load/vec4 v0000025ab6a5f870_0;
    %flag_set/vec4 8;
    %jmp/0xz  T_18.14, 8;
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000025ab6a5fa50_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000025ab6a5fa50_0, 0, 32;
T_18.14 ;
    %jmp T_18.7;
T_18.7 ;
    %pop/vec4 1;
T_18.0 ;
    %jmp T_18;
    .thread T_18;
    .scope S_0000025ab69f35d0;
T_19 ;
    %vpi_call/w 3 423 "$display", "\012=== PAPER INSTRUCTION STATISTICS (NO JUMP) ===" {0 0 0};
    %vpi_call/w 3 424 "$display", "Total paper instructions executed: %0d", v0000025ab6a60270_0 {0 0 0};
    %vpi_call/w 3 425 "$display", "LD (Load) instructions: %0d", v0000025ab6a60770_0 {0 0 0};
    %vpi_call/w 3 426 "$display", "SD (Store) instructions: %0d", v0000025ab6a608b0_0 {0 0 0};
    %vpi_call/w 3 427 "$display", "ADD instructions: %0d", v0000025ab6a60090_0 {0 0 0};
    %vpi_call/w 3 428 "$display", "SUB instructions: %0d", v0000025ab6a6b410_0 {0 0 0};
    %vpi_call/w 3 429 "$display", "AND instructions: %0d", v0000025ab6a5f910_0 {0 0 0};
    %vpi_call/w 3 430 "$display", "OR instructions: %0d", v0000025ab6a60810_0 {0 0 0};
    %vpi_call/w 3 431 "$display", "BEQ branches taken: %0d (ONLY branching mechanism)", v0000025ab6a5fa50_0 {0 0 0};
    %vpi_call/w 3 432 "$display", "All instructions conform to the research paper specification!" {0 0 0};
    %vpi_call/w 3 433 "$display", "No jump instructions used - BEQ provides all branching functionality." {0 0 0};
    %end;
    .thread T_19, $final;
# The file index is used to find the file name in the following table.
:file_names 13;
    "N/A";
    "<interactive>";
    "-";
    "cpu_tb.sv";
    "single_cycle_cpu.sv";
    "control_unit_gaurav.sv";
    "data_mem_gaurav.sv";
    "data_path.sv";
    "alu.sv";
    "reg_file_gaurav.sv";
    "instr_mem_gaurav.sv";
    "pc_logic.sv";
    "sign_extend.sv";
