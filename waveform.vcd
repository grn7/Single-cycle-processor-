$date
	Tue Jun 10 10:19:04 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_single_cycle_cpu $end
$var wire 64 ! debug_out [63:0] $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ zero $end
$var wire 64 % write_data_memory [63:0] $end
$var wire 1 & reg_write $end
$var wire 64 ' read_data_memory [63:0] $end
$var wire 5 ( rd_addr [4:0] $end
$var wire 64 ) pc [63:0] $end
$var wire 1 * mem_write $end
$var wire 1 + mem_to_reg $end
$var wire 1 , mem_read $end
$var wire 32 - instruction [31:0] $end
$var wire 64 . imm [63:0] $end
$var wire 64 / debug_out [63:0] $end
$var wire 1 0 branch $end
$var wire 1 1 alu_src $end
$var wire 64 2 alu_result [63:0] $end
$var wire 3 3 alu_control [2:0] $end
$scope module cu_inst $end
$var wire 3 4 funct3 [2:0] $end
$var wire 7 5 funct7 [6:0] $end
$var wire 7 6 opcode [6:0] $end
$var reg 3 7 alu_control [2:0] $end
$var reg 1 1 alu_src $end
$var reg 1 0 branch $end
$var reg 1 , mem_read $end
$var reg 1 + mem_to_reg $end
$var reg 1 * mem_write $end
$var reg 1 & reg_write $end
$upscope $end
$scope module data_mem_inst $end
$var wire 32 8 addr [31:0] $end
$var wire 1 " clk $end
$var wire 1 9 rd_enable $end
$var wire 1 # rst $end
$var wire 1 * wr_enable $end
$var wire 64 : wr_data [63:0] $end
$var wire 32 ; word_addr [31:0] $end
$var wire 64 < rd_data [63:0] $end
$var parameter 32 = mem_size $end
$var parameter 32 > rom_size $end
$var integer 32 ? i [31:0] $end
$upscope $end
$scope module dp_inst $end
$var wire 3 @ alu_control [2:0] $end
$var wire 1 1 alu_src $end
$var wire 1 " clk $end
$var wire 1 + mem_to_reg $end
$var wire 64 A read_data_memory [63:0] $end
$var wire 1 & reg_write $end
$var wire 1 # rst $end
$var wire 64 B write_data_memory [63:0] $end
$var wire 1 $ zero $end
$var wire 64 C wb_data [63:0] $end
$var wire 64 D rs2_data [63:0] $end
$var wire 5 E rs2 [4:0] $end
$var wire 64 F rs1_data [63:0] $end
$var wire 5 G rs1 [4:0] $end
$var wire 5 H rd_addr [4:0] $end
$var wire 32 I instruction [31:0] $end
$var wire 64 J imm [63:0] $end
$var wire 64 K debug_out [63:0] $end
$var wire 64 L alu_result [63:0] $end
$var wire 64 M alu_b [63:0] $end
$scope module alu_inst $end
$var wire 3 N alu_control [2:0] $end
$var wire 64 O b [63:0] $end
$var wire 1 $ zero $end
$var wire 64 P a [63:0] $end
$var reg 64 Q result [63:0] $end
$upscope $end
$scope module rf $end
$var wire 1 " clk $end
$var wire 64 R debug_output [63:0] $end
$var wire 5 S rd_addr1 [4:0] $end
$var wire 5 T rd_addr2 [4:0] $end
$var wire 1 # rst $end
$var wire 5 U wr_addr [4:0] $end
$var wire 64 V wr_data [63:0] $end
$var wire 1 & wr_enable $end
$var wire 64 W rd_data2 [63:0] $end
$var wire 64 X rd_data1 [63:0] $end
$var integer 32 Y i [31:0] $end
$upscope $end
$upscope $end
$scope module instr_mem_inst $end
$var wire 32 Z address [31:0] $end
$var wire 32 [ word_addr [31:0] $end
$var wire 32 \ instruction [31:0] $end
$var parameter 32 ] mem_size $end
$upscope $end
$scope module pc_inst $end
$var wire 1 0 branch $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ zero $end
$var wire 64 ^ imm [63:0] $end
$var reg 64 _ pc [63:0] $end
$upscope $end
$scope module sign_ext_inst $end
$var wire 32 ` instr [31:0] $end
$var wire 64 a imm_out [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 ]
b1000 >
b100000000 =
$end
#0
$dumpvars
b0 a
b11000010000011 `
b0 _
b0 ^
b11000010000011 \
b0 [
b0 Z
b100000 Y
b0 X
b0 W
b1111 V
b1 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b11000010000011 I
b1 H
b0 G
b0 F
b0 E
b0 D
b1111 C
b0 B
b1111 A
b0 @
b100000000 ?
b1111 <
b0 ;
b0 :
19
b0 8
b0 7
b11 6
b0 5
b11 4
b0 3
b0 2
11
00
b0 /
b0 .
b11000010000011 -
1,
1+
0*
b0 )
b1 (
b1111 '
1&
b0 %
1$
1#
0"
b0 !
$end
#5000
b100000 Y
1"
#10000
0"
#15000
b100000 Y
1"
#20000
0"
0#
#25000
b11001 C
b11001 V
b11001 '
b11001 <
b11001 A
b1 ;
b1000 8
0$
b1000 2
b1000 L
b1000 Q
b1000 M
b1000 O
b1000 .
b1000 ^
b1000 a
b1000 J
b10 (
b10 H
b10 U
b1000 E
b1000 T
b100000000011000100000011 -
b100000000011000100000011 I
b100000000011000100000011 \
b100000000011000100000011 `
b1 [
b100 Z
b100 )
b100 _
1"
#30000
0"
#35000
b0 '
b0 <
b0 A
b101 ;
b101000 8
b101000 2
b101000 L
b101000 Q
b101000 C
b101000 V
b11001 M
b11001 O
b11001 %
b11001 :
b11001 B
b11001 D
b11001 W
b1111 F
b1111 P
b1111 X
01
0+
0,
1&
b10 .
b10 ^
b10 a
b10 J
b11 (
b11 H
b11 U
b10 E
b10 T
b1 G
b1 S
b0 4
b110011 6
b1000001000000110110011 -
b1000001000000110110011 I
b1000001000000110110011 \
b1000001000000110110011 `
b10 [
b1000 Z
b1000 )
b1000 _
1"
#40000
0"
#45000
b1111 '
b1111 <
b1111 A
b0 ;
b11 C
b11 V
b11 8
b11 2
b11 L
b11 Q
b11 M
b11 O
b101000 %
b101000 :
b101000 B
b101000 D
b101000 W
b0 F
b0 P
b0 X
11
1&
b11 .
b11 ^
b11 a
b11 J
b11111 (
b11111 H
b11111 U
b11 E
b11 T
b0 G
b0 S
b10011 6
b1100000000111110010011 -
b1100000000111110010011 I
b1100000000111110010011 \
b1100000000111110010011 `
b11 [
b1100 Z
b1100 )
b1100 _
1"
#50000
0"
#55000
b0 C
b0 V
b0 8
1$
b0 2
b0 L
b0 Q
b0 M
b0 O
b0 %
b0 :
b0 B
b0 D
b0 W
b0 .
b0 ^
b0 a
b0 J
b0 (
b0 H
b0 U
b0 E
b0 T
b10011 -
b10011 I
b10011 \
b10011 `
b100 [
b10000 Z
b11 !
b11 /
b11 K
b11 R
b10000 )
b10000 _
1"
#60000
0"
#65000
b101 [
b10100 Z
b10100 )
b10100 _
1"
#70000
0"
#75000
b110 [
b11000 Z
b11000 )
b11000 _
1"
#80000
0"
#85000
b111 [
b11100 Z
b11100 )
b11100 _
1"
#90000
0"
#95000
b1000 [
b100000 Z
b100000 )
b100000 _
1"
#100000
0"
#105000
b1001 [
b100100 Z
b100100 )
b100100 _
1"
#110000
0"
#115000
b1010 [
b101000 Z
b101000 )
b101000 _
1"
#120000
0"
